{"version":3,"file":"charty.min.js","sources":["../src/utils/datavalidator/datavalidator.js","../src/api/chartyinit.js","../src/api/chartynames.js","../src/components/scales/basescale.js","../src/components/scales/linearscale.js","../src/components/scales/ordinalscale.js","../src/components/scales/peakvalleylinearscale.js","../src/components/scales/scalesfactory.js","../src/composition/datamapper/datamapper.js","../src/components/base/basechart.js","../src/composition/simpledatagroup.js","../src/components/axis/axis.js","../src/components/bar/bar.js","../src/components/bar/horizontalbar.js","../src/components/bar/winlossbar.js","../src/components/circle/circle.js","../src/components/donut/donut.js","../src/components/line/line.js","../src/components/roundedrectangle/roundedrectangle.js","../src/components/text/text.js","../src/components/text/abovetext.js","../src/components/text/righttext.js","../src/components/text/winlosstext.js","../src/components/text/labeledtext.js","../src/components/triangle/triangle.js","../src/composition/multipledatagroup.js","../src/composition/multipleinstancesmixin.js","../src/composition/axis/xyaxis.js","../src/composition/axis/yxyaxis.js","../src/composition/barchart/barchart.js","../src/composition/groupedbarchart/groupedbarchart.js","../src/composition/donutwithinnertext/donutwithinnertext.js","../src/composition/labeledtrianglechart/labeledtrianglechart.js","../src/composition/linechart/linechart.js","../src/composition/linechart/linechartcircles.js","../src/composition/scatterplot/scatterplot.js","../src/utils/accessor/accessor.js","../src/utils/events/functionevent.js","../src/utils/events/bootstrapevent.js","../src/utils/events/eventfactory.js","../src/utils/events/eventmanager.js","../src/api/chartinterface.js","../src/api/charty.js"],"names":["root","factory","define","amd","d3","_","DataValidator","this","prototype","isPositiveNumber","value","message","isUndefined","isNumber","Error","Charty","CHART_NAMES","AXIS","BAR","HORIZONTAL_BAR","WIN_LOSS_BAR","BASE_CHART","CIRCLE","DONUT","LINE","ROUNDED_RECTANGLE","TEXT","ABOVE_TEXT","RIGHT_TEXT","WIN_LOSS_TEXT","TRIANGLE","XY_AXIS","YXY_AXIS","BAR_CHART","LABELED_TRIANGLE_CHART","SCATTERPLOT","MULTIPLE_DATA_GROUP","MULTIPLE_INSTANCES_MIXIN","SIMPLE_DATA_GROUP","DONUT_INNER_TEXT","GROUPED_BAR_CHART","LINE_CHART","LINE_CHART_CIRCLES","LABELED_TEXT","AXIS_TYPE","ORDINAL","LINEAR","PEAK_VALLEY_LINEAR","X","Y","BaseScale","getScale","scale","generateRange","range","r","axisType","LinearScale","options","linear","niceDomain","setDomain","arrayValues","domain","nice","setRange","map","band","max","calculateDomain","data","iterator","Infinity","min","d","getData","delta","isEmpty","each","element","chartData","maxg","ming","Math","getDelta","isNaN","setMaxValue","step","abs","maxVal","maxValue","getMaxValue","OrdinalScale","ordinal","spacing","rangeRoundBands","factor","rangeBand","f","first","defaultDomain","length","PeakValleyLinearScale","apply","arguments","valley","peak","series","sum","point","reset","ScaleFactory","type","isString","name","DataMapper","scales","addScale","setAsBase","baseScale","push","getBaseScale","dataElement","chartFactor","pos","chart","width","newWidth","w","_mixins","height","newHeight","h","setXScale","xscale","setYScale","yscale","setEventManager","evtManager","eventManager","mixin","extend","transform","next","initialize","xt","yt","cssClass","axis","svg","axisLayerOptions","dataBind","getLength","selectAll","insert","append","events","enter","grid","tickSize","tsize","classed","attr","textLabel","text","labelRotate","merge","call","xPos","yPos","textAnchor","rotation","style","remove","layer","base","size","setScale","showAsGrid","val","orient","xtranslate","t","ytranslate","setTextLabel","label","tickCount","tCount","ticks","tickFormat","format","isFunction","setClass","newClass","setRotation","degrees","defaults","c","bindAll","zeroY","heightZeroY","zScale","z","x","y","exit","setZScale","barLayer","off","on","zeroX","offset","customValue","yScaleMap","args","dataValidator","errors","invalidRadio","invalidRadius","ir","or","pieLayout","layout","pie","sort","arcGen","arc","xPosition","yPosition","innerRadius","outerRadius","line","datum","invalidRH","invalidRW","invalidRX","invalidRY","rh","rw","rc","rx","ry","partial","class","Label","dx","dy","textLayer","toString","getPath","result","dataArray","self","xBand","x1","x2","x3","y1","y2","unshift","y3","c1","c2","_calculateDomains","setDefaultXDomain","defaultXDomain","setDefaultYDomain","defaultYDomain","instances","componentsMixins","i","instance","chartName","xaxis","xAxisLabel","xTickCount","xAxisTickFormat","xAxisClass","xAxisTickRotation","yaxis","yAxisLabel","yTickCount","yAxisTickFormat","yAxisClass","yAxisTickRotation","xyaxis","yaxisright","barType","axisSystem","labelType","bars","defaultZDomain","setDefaultZDomain","zDomain","invalidFontSize","fontSize","stringValue","update","Accessor","index","hasNext","restart","setData","FunctionEvent","opts","bind","target","execute","$","BootstrapEvent","d3Element","select","placement","trigger","html","container","context","content","EventFactory","createEvent","e","EventObject","evt","EventManager","addEvent","ChartInterface","rootSelection","gSvg","eventFactory","accessor","setDimensions","margin","marginValues","left","top","right","bottom","lfactor","tfactor","svgHeight","parseInt","svgWidth","marginleft","margintop","marginright","marginbottom","marginlfactor","margintfactor","draw","eventsArray","redimension","rootHeight","rootWidth","setBackgroundImage","imgClass","removeBackgroundImage","setTitle","title","scaleFactory","selection","gradients","defs","gradient","grad","id","orientation","classes","gradientClass","className","xAxis","yAxis","zAxis"],"mappings":"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","sourcesContent":["/**\n * Data checker for different data input\n *\n * @class DataValidator\n * @requires d3,\n *           underscore\n *\n * @author \"Marcio Caraballo <marcio.caraballososa@gmail.com>\"\n */\n\n(function(root, factory) {\n    /** Setting up AMD support*/\n    if (typeof define === 'function' && define.amd) {\n        /** AMD */\n        define('charty/datavalidator', [\n                'd3',\n                'underscore'\n            ],\n            function(d3, _) {\n                /** Export global even in AMD case in case this script\n                 * is loaded with others */\n                return factory(_);\n            });\n    } else {\n        /** Browser globals */\n        root.DataValidator = factory(_);\n    }\n}(this, function(_) {\n\n    /** \n     * Class constructor\n     *\n     * @constructor\n     */\n    function DataValidator() {}\n\n    /**\n     * Checks if a given value is defined and > 0\n     *\n     * @method isPositiveNumber\n     * @param {Number} value number to check\n     * @param {String} message error message to show\n     * @return {Number} value\n     */\n    DataValidator.prototype.isPositiveNumber = function(value, message) {\n        if (!_.isUndefined(value) && (!_.isNumber(value) || value < 0)) {\n            throw new Error(message);\n        }\n        return value;\n    };\n\n    /**\n     * Checks if value is number, or is defined\n     *\n     * @method isNumber\n     * @param {Number} value to check\n     * @param {String} error message\n     * @return {Number} value\n     */\n    DataValidator.prototype.isNumber = function(value, message) {\n        if (!_.isUndefined(value) && !_.isNumber(value)) {\n            throw new Error(message);\n        }\n        return value;\n    };\n\n    /**\n     * Checks if a value is defined\n     *\n     * @method isUndefined\n     * @param {Number} value to check\n     * @param {String} message error message\n     * @return {Number} value\n     */\n    DataValidator.prototype.isUndefined = function(value, message) {\n        if (_.isUndefined(value)) {\n            throw new Error(message);\n        }\n        return value;\n    };\n\n    return DataValidator;\n}));\n","/**\n * Api init for chart creation management.\n *\n *\n * @class ChartsApi\n * @constructor\n *\n * @author \"Marcio Caraballo <marcio.caraballososa@gmail.com>\"\n */\n\n(function(root, factory) {\n\n    /** Setting up AMD support*/\n    if (typeof define === 'function' && define.amd) {\n        /** AMD */\n        define('charty/chartyinit',\n            function() {\n                /** Export global even in AMD case in case this script\n                 * is loaded with others */\n                return factory();\n            });\n    } else {\n        /** Browser globals */\n        root.Charty = factory();\n    }\n}(this, function() {\n\n    var Charty = {};\n\n    return Charty;\n}));\n","/**\n * Define constants that will be used as names for different parts\n *\n * @class ChartNames\n * @requires chartyinit\n *\n * @author \"Marcio Caraballo <marcio.caraballososa@gmail.com>\"\n */\n\n(function(root, factory) {\n    /** Setting up AMD support*/\n    if (typeof define === 'function' && define.amd) {\n        /** AMD */\n        define('charty/chartynames', [\n                'charty/chartyinit'\n            ],\n            function(Charty) {\n                /** Export global even in AMD case in case this script\n                 * is loaded with others */\n                return factory(Charty);\n            });\n    } else {\n        /** Browser globals */\n        root.Charty = factory(Charty);\n    }\n}(this, function(Charty) {\n\n    /** Chart / Components / Compositions names */\n    Charty.CHART_NAMES = {\n        AXIS: 'Axis',\n        BAR: 'Bar',\n        HORIZONTAL_BAR: 'HorizontalBar',\n        WIN_LOSS_BAR: 'WinLossBar',\n        BASE_CHART: 'BaseChart',\n        CIRCLE: 'Circle',\n        DONUT: 'Donut',\n        LINE: 'Line',\n        ROUNDED_RECTANGLE: 'RoundedRectangle',\n        TEXT: 'Text',\n        ABOVE_TEXT: 'AboveText',\n        RIGHT_TEXT: 'RightText',\n        WIN_LOSS_TEXT: 'WinLossText',\n        TRIANGLE: 'Triangle',\n        XY_AXIS: 'XYAxis',\n        YXY_AXIS: 'YXYAxis',\n        BAR_CHART: 'BarChart',\n        LABELED_TRIANGLE_CHART: 'LabeledTriangleChart',\n        SCATTERPLOT: 'Scatterplot',\n        MULTIPLE_DATA_GROUP: 'MultipleDataGroup',\n        MULTIPLE_INSTANCES_MIXIN: 'MultipleInstancesMixin',\n        SIMPLE_DATA_GROUP: 'SimpleDataGroup',\n        DONUT_INNER_TEXT: 'DonutWithInnerText',\n        GROUPED_BAR_CHART: 'GroupedBarChart',\n        LINE_CHART: 'LineChart',\n        LINE_CHART_CIRCLES: 'LineChartCircles',\n        LABELED_TEXT: 'LabeledText'\n    };\n\n    /**\n     * Axis types are defined as constants\n     *\n     * Related to scaling.\n     */\n    Charty.AXIS_TYPE = {\n        ORDINAL: 'ordinal',\n        LINEAR: 'linear',\n        PEAK_VALLEY_LINEAR: 'peakValleyLinear'\n    };\n\n    /**\n     * Axis defined as constants\n     */\n    Charty.AXIS = {\n        X: 'x',\n        Y: 'y'\n    };\n\n    return Charty;\n}));\n","/**\n * Defines common scale functionality. Used as base element for inheritance.\n *\n * @class BaseScale\n * @requires d3.chart, charty\n *\n * @author \"Marcio Caraballo <marcio.caraballososa@gmail.com>\"\n */\n(function(root, factory) {\n    /** Setting up AMD support*/\n    if (typeof define === 'function' && define.amd) {\n        /** AMD */\n        define('charty/basescale', [\n                'd3.chart',\n                'charty/chartynames'\n            ],\n            function(d3, Charty) {\n                /** Export global even in AMD case in case this script\n                 *  is loaded with others */\n                return factory(d3, Charty);\n            });\n    } else {\n        /** Browser globals */\n        root.BaseScale = factory(d3, Charty);\n    }\n}(this, function(d3, Charty) {\n\n    /**\n     * Class constructor\n     *\n     * @constructor\n     */\n    var BaseScale = function() {};\n\n    /**\n     *  Returns the contained scale.\n     *\n     *  @method getScale\n     *  @return {Object} d3.scale Linear / Ordinal scale\n     */\n    BaseScale.prototype.getScale = function() {\n        return this.scale;\n    };\n\n    /**\n     *  Generates range value for a scale.\n     *\n     *  @method generateRange\n     *  @param {Number} range value for the range\n     *  @return {Number} generated range value\n     */\n    BaseScale.prototype.generateRange = function(range) {\n        var r;\n\n        if (this.axisType === Charty.AXIS.X) {\n            r = [0, range];\n        } else {\n            if (this.axisType === Charty.AXIS.Y) {\n                r = [range, 0];\n            } else {\n                throw new Error('No range was defined for this scale.');\n            }\n        }\n\n        return r;\n    };\n\n    return BaseScale;\n}));\n","/* global BaseScale: true */\n/**\n * Linear scale for linear axis\n *\n * @class LinearScale\n * @extends BaseScale\n * @requires d3.chart,\n *           basescale,\n *           uderscore\n *\n * @author \"Marcio Caraballo <marcio.caraballososa@gmail.com>\"\n */\n(function(root, factory) {\n    /** Setting up AMD support*/\n    if (typeof define === 'function' && define.amd) {\n        /** AMD */\n        define('charty/linearscale', [\n                'd3.chart',\n                'charty/basescale',\n                'underscore'\n            ],\n            function(d3, BaseScale, _) {\n                /** Export global even in AMD case in case this script\n                 * is loaded with others */\n                return factory(d3, BaseScale, _);\n            });\n    } else {\n        /** Browser globals */\n        root.LinearScale = factory(d3, BaseScale, _);\n    }\n}(this, function(d3, BaseScale, _) {\n\n    /**\n     * @constructor\n     *\n     * @param {Charty.AXIS.X|Charty.AXIS.Y} axisType - X or Y axis setting.\n     * @param {Object} [options] - Settings\n     *     @param {Boolean} [options.niceDomain=false] - Beautify the domain to include all the possible values.\n     */\n    var LinearScale = function(axisType, options) {\n        this.scale = d3.scale.linear();\n        this.axisType = axisType;\n        this.niceDomain = options && options.niceDomain || false;\n    };\n\n    /**\n     * Inheritance from BaseScale\n     */\n    LinearScale.prototype = new BaseScale();\n\n    /**\n     * Sets domain for linear scale\n     *\n     * @method setDomain\n     * @param {Object} arrayValues Max and min value defined by array\n     * @chainable\n     */\n    LinearScale.prototype.setDomain = function(arrayValues) {\n        return this.scale.domain(arrayValues).nice(), this;\n    };\n\n    /**\n     * Sets the range for the linear scale\n     *\n     * @method setRange\n     * @param {Number} range numeric value for linear scale\n     * @chainable\n     */\n    LinearScale.prototype.setRange = function(range) {\n        return this.scale.range(this.generateRange(range)), this;\n    };\n\n    /**\n     * Returns scaled value\n     *\n     * @method map\n     * @param {Number} value number to map to scale\n     * @return {Number} mapped value\n     */\n    LinearScale.prototype.map = function(value) {\n        return this.scale(value);\n    };\n\n    /**\n     * Returns band for a specified value\n     *\n     * @method band\n     * @param {Number} max max value for a scale\n     * @param {Number} value to map\n     * @return {Number} similar to ordinal band but for\n     * linear scale\n     */\n    LinearScale.prototype.band = function(max, value) {\n        return (max - this.scale(value));\n    };\n\n    /**\n     * Calculates the domain for the linear scale\n     *\n     * Data probably won't be uniform, so for each data element,\n     * a maximum value is obtained. The maximum element will be kept.\n     * Same situation is for the minimum element\n     *\n     * Keeps a reference for the minimum value\n     *\n     * @method calculateDomain\n     * @param {Object} data Accessor for the data collection\n     * @param {Object} iterator callback function\n     * @chainable\n     */\n    LinearScale.prototype.calculateDomain = function(data, iterator) {\n        var max = -Infinity,\n            min = Infinity,\n            d = data.getData(),\n            delta = 0;\n\n        if (d && !_.isEmpty(d)) {\n\n            _.each(d, function(element) {\n                var chartData = element.data;\n\n                /** Chart can receive no data, should draw nothing or remove already drawn elements */\n                if (chartData && !_.isEmpty(chartData)) {\n                    var maxg = d3.max(chartData, iterator),\n                        ming = d3.min(chartData, iterator);\n\n                    max = Math.max(maxg, max);\n                    min = Math.min(ming, min);\n                }\n            }, this);\n\n            if (this.niceDomain) {\n                delta = this.getDelta(max, min);\n                // If no negative values exist, don't use the delta on the min value.\n                min = min >= 0 ? min : min - delta;\n\n                // If no positive values exist, set the delta to 0.\n                delta = max <= 0 ? 0 : delta;\n            }\n\n            /** Case when there is no data, sometimes can receive a NaN */\n            if (!_.isNaN(max) && !_.isNaN(min)) {\n                return this.setMaxValue(max)\n                    .setDomain([Math.min(0, min), Math.max(0, max + delta)]);\n            }\n\n        }\n    };\n\n    /**\n     * Returns the delta value to add to the domain in order to make sure all the\n     * data is wrapped by axis ticks.\n     *\n     * @method getDelta\n     * @param {Number} max The maximum value\n     * @param {Number} min The minimum value\n     * @return {Number} The delta value calculated on a 10 step division.\n     */\n    LinearScale.prototype.getDelta = function(max, min) {\n        var step = (max - min) / 10 + 1;\n        return Math.abs(max - min) % step;\n    };\n\n    /**\n     * Maximum value setting for linear scale.\n     * Useful when setting discrete ticks for continuous scale\n     *\n     * @method setMaxValue\n     * @param {Number} maxVal Scale's maximum value\n     * @chainable\n     */\n    LinearScale.prototype.setMaxValue = function(maxVal) {\n        this.maxValue = maxVal;\n        return this;\n    };\n\n    /**\n     * Returns max value\n     *\n     * @method getMaxValue\n     * @return {Number} scale's maximum value\n     */\n    LinearScale.prototype.getMaxValue = function() {\n        return this.maxValue;\n    };\n\n    return LinearScale;\n}));\n","/* global BaseScale: true */\n/**\n * Ordinal Scale\n *\n * @class OrdinalScale\n * @extends BaseScale\n * @requires d3.chart, basescale\n *\n * @author \"Marcio Caraballo <marcio.caraballososa@gmail.com>\"\n */\n(function(root, factory) {\n    /** Setting up AMD support*/\n    if (typeof define === 'function' && define.amd) {\n        /** AMD */\n        define('charty/ordinalscale', [\n                'd3.chart',\n                'charty/basescale',\n            ],\n            function(d3, BaseScale) {\n                /** Export global even in AMD case in case this script\n                 *  is loaded with others */\n                return factory(d3, BaseScale);\n            });\n    } else {\n        /** Browser globals */\n        root.OrdinalScale = factory(d3, BaseScale);\n    }\n}(this, function(d3, BaseScale) {\n    /**\n     * @constructor\n     *\n     * @param {Charty.AXIS.X|Charty.AXIS.Y} axisType - X or Y axis setting.\n     * @param {Object} [options] - Settings\n     *     @param {Number} [options.spacing=.1] - Spacing between bars.\n     */\n    var OrdinalScale = function(axisType, options) {\n        this.scale = d3.scale.ordinal();\n        this.axisType = axisType;\n        this.spacing = options && options.spacing || 0.1;\n    };\n\n    /**\n     *  Inheritance from BaseScale\n     */\n    OrdinalScale.prototype = new BaseScale();\n\n    /**\n     *  Sets the domain data for the scale\n     *\n     *  @method setDomain\n     *  @param {Array} domain values for ordinal domain\n     *  @chainable\n     */\n    OrdinalScale.prototype.setDomain = function(domain) {\n        return this.scale = this.scale.domain(domain), this;\n    };\n\n    /**\n     *  Sets the range for the scale\n     *\n     *  @method setRange\n     *  @param {Number} range numeric value for the range\n     *  @chainable\n     */\n    OrdinalScale.prototype.setRange = function(range) {\n        return this.scale = this.scale.rangeRoundBands(this.generateRange(range), this.spacing), this;\n    };\n\n    /**\n     *  Maps a value to the current scaling\n     *  Since ordinal scales computes a band width\n     *  A value needs to be mapped and moved according\n     *  to that band width\n     *\n     *  @method map\n     *  @param {String} value String value that belongs to the domain\n     *  @param {Number} factor reduce factor for overlapping charts\n     *  @return {Number} mapped String value\n     */\n    OrdinalScale.prototype.map = function(value, factor) {\n        return (this.scale(value) + ((this.scale.rangeBand() - (this.scale.rangeBand() * factor)) / 2));\n    };\n\n    /**\n     *  Returns the range band for the scale\n     *  Can be reduced if (factor < 1)\n     *\n     *  @method band\n     *  @param {Number} factor reduce factor\n     *  @return {Number} scale width\n     */\n    OrdinalScale.prototype.band = function(factor) {\n        return (this.scale.rangeBand() * factor);\n    };\n\n    /**\n     *  Calculates the scale domain, based on a data collection and a\n     *  callback function\n     *  Regarding the data series, ordinal scales should be uniform, whether\n     *  they have values for that specific ordinal element or not.\n     *\n     *  @method calculateDomain\n     *  @param {Object} data Accessor for the data collection\n     *  @param {Object} f callback function\n     *  @chainable\n     */\n    OrdinalScale.prototype.calculateDomain = function(data, f) {\n        return this.setDomain(data.first().data.map(f));\n    };\n\n    /**\n     *  Checks if domain wasn't previously calculated\n     *\n     *  @method defaultDomain\n     *  @return {Boolean} True if domain isn't set\n     */\n    OrdinalScale.prototype.defaultDomain = function() {\n        return this.scale.domain().length === 0;\n    };\n\n    return OrdinalScale;\n}));\n","/*global LinearScale: true*/\n/**\n * Peak Valley scale for linear axis\n *\n * @class PeakValleyLinearScale\n * @extends BaseScale\n * @requires d3.chart, linearscale, charty, underscore\n *\n * @author \"Cesar Del Soldato <cesards@gmail.com>\"\n */\n(function(root, factory) {\n    /** Setting up AMD support*/\n    if (typeof define === 'function' && define.amd) {\n        /** AMD */\n        define('charty/peakvalleylinearscale', [\n                'd3.chart',\n                'charty/linearscale',\n                'charty/chartynames',\n                'underscore'\n            ],\n            function(d3, LinearScale, Charty, _) {\n                /** Export global even in AMD case in case this script\n                 * is loaded with others */\n                return factory(d3, LinearScale, Charty, _);\n            });\n    } else {\n        /** Browser globals */\n        root.PeakValleyLinearScale = factory(d3, LinearScale, Charty, _);\n    }\n}(this, function(d3, LinearScale, Charty, _) {\n    /**\n     * @constructor\n     *\n     * @param {Charty.AXIS.X|Charty.AXIS.Y} axisType - X or Y axis setting.\n     * @param {Object} [options] - Settings\n     *     @param {Boolean} [options.niceDomain=false] - Beautify the domain to include all the possible values.\n     */\n    var PeakValleyLinearScale = function() {\n        LinearScale.apply(this, arguments);\n    };\n\n    /**\n     * Inheritance from LinearScale\n     */\n    PeakValleyLinearScale.prototype = new LinearScale();\n\n    /**\n     * Calculates the domain for the peak valley linear scale\n     *\n     * The domain is calculated by adding all the data points one by one\n     * and keeping the highest and lowest value it reaches.\n     * It sets the domain and the maximum value.\n     *\n     * @method calculateDomain\n     * @chainable\n     * @param {Object} data Data collection.\n     * @param {Object} iterator Provide a way to access the data\n     */\n    PeakValleyLinearScale.prototype.calculateDomain = function(data, iterator) {\n        var max = 0,\n            valley = 0,\n            peak = 0,\n            series = data.getData(),\n            delta = 0;\n\n        if (series && !_.isEmpty(series)) {\n\n            _.each(series, function(element) {\n                var data = element.data,\n                    sum = 0;\n\n                // Chart can receive no data, should draw nothing or remove\n                // already drawn elements\n                if (data && !_.isEmpty(data)) {\n                    var maxg = d3.max(data, iterator);\n\n                    max = Math.max(maxg, max);\n\n                    // Max and Min after sum all the value from the serie.\n                    _.each(data, function(point) {\n                        if (point.reset) {\n                            sum = 0;\n                        }\n\n                        sum = iterator ? sum + iterator(point) : sum + point;\n\n                        if (sum > peak) {\n                            peak = sum;\n                        } else if (sum < valley) {\n                            valley = sum;\n                        }\n                    });\n                }\n            }, this);\n\n            if (this.niceDomain) {\n                delta = this.getDelta(peak, valley);\n\n                // If no positives are shown, don't use the delta on the peak.\n                peak = peak <= 0 ? peak : peak + delta;\n\n                // If no negatives are shown, don't use the delta on the valley.\n                valley = valley >= 0 ? valley : valley - delta;\n            }\n\n            // Case when there is no data, sometimes can receive a NaN\n            if (!_.isNaN(peak) && !_.isNaN(valley) && !_.isNaN(max)) {\n                return this.setMaxValue(max).setDomain([\n                    Math.min(0, valley),\n                    Math.max(0, peak)\n                ]);\n            }\n\n        }\n    };\n\n    return PeakValleyLinearScale;\n}));\n","/* global OrdinalScale: true, LinearScale: true, PeakValleyLinearScale: true */\n/**\n * Scale factory. Separation is provived in an attempt to provide an easy way\n * to switching scales in a defined chart.\n *\n * @class ScaleFactory\n * @requires d3.chart, charty, ordinalscale, linearscale, peakvalleylinearscale\n *\n * @author \"Marcio Caraballo <marcio.caraballososa@gmail.com>\"\n */\n(function(root, factory) {\n    /** Setting up AMD support*/\n    if (typeof define === 'function' && define.amd) {\n        /** AMD */\n        define('charty/scalesfactory', [\n                'charty/chartynames',\n                'charty/ordinalscale',\n                'charty/linearscale',\n                'charty/peakvalleylinearscale'\n            ],\n            function(Charty, OrdinalScale, LinearScale, PeakValleyLinearScale) {\n                /** Export global even in AMD case in case this script\n                 *  is loaded with others */\n                return factory(Charty, OrdinalScale, LinearScale, PeakValleyLinearScale);\n            });\n    } else {\n        /** Browser globals */\n        root.ScaleFactory = factory(Charty, OrdinalScale, LinearScale, PeakValleyLinearScale);\n    }\n}(this, function(Charty, OrdinalScale, LinearScale, PeakValleyLinearScale) {\n\n    /** @constructor */\n    function ScaleFactory() {}\n\n    /**\n     * Returns a specified scale object acording to a scale type.\n     *\n     * @method scale\n     *\n     * @param {String|Object} options      - List of possible options provided to the scale contructor.\n     *   @param {String}  options.name       - Scale type ID.\n     *   @param {Number}  options.spacing    - Define how much space we leave between bars (OrdinalScale)\n     *   @param {Boolean} options.niceDomain - Ask for a domain proccessing to include all values in the axis (LinearScale)\n     *\n     * @param {Charty.AXIS.X|Charty.AXIS.Y} axisType - X or Y axis setting.\n     *\n     * @return {Object} Scale instance.\n     */\n    ScaleFactory.prototype.scale = function(options, axisType) {\n        var type;\n\n        // Retro compatible for type as Strings, since version 0.5.11 we could\n        // send options to the scales to be able to configure the object.\n        if (_.isString(options)) {\n            type = options;\n            options = {};\n        } else {\n            type = options.name;\n        }\n\n        switch (type) {\n            case Charty.AXIS_TYPE.ORDINAL:\n                return new OrdinalScale(axisType, options);\n            case Charty.AXIS_TYPE.LINEAR:\n                return new LinearScale(axisType, options);\n            case Charty.AXIS_TYPE.PEAK_VALLEY_LINEAR:\n                return new PeakValleyLinearScale(axisType, options);\n            default:\n                throw new Error('Provide a value Charty.AXIS_TYPE value');\n        }\n    };\n\n    return ScaleFactory;\n}));\n","/*global LinearScale: true, OrdinalScale: true*/\n/**\n * Maps every data point, taking into account one to many\n * scales. Works as a scale composite object.\n *\n * It is possible to requiere more than one scale to map certain\n * elements, so this component will make the correct positioning.\n *\n * Each chart will have two mappers : one for horizontal axis and\n * other for vertical axis.\n *\n * @class DataMapper\n * @requires linearscale,\n *           basescale,\n *           underscore\n *\n * @author \"Marcio Caraballo <marcio.caraballososa@gmail.com>\"\n */\n(function(root, factory) {\n    /** Setting up AMD support*/\n    if (typeof define === 'function' && define.amd) {\n        /** AMD */\n        define('charty/datamapper', [\n                'charty/linearscale',\n                'charty/ordinalscale',\n                'underscore'\n            ],\n            function(LinearScale, OrdinalScale, _) {\n                /** Export global even in AMD case in case this script\n                 * is loaded with others */\n                return factory(LinearScale, OrdinalScale, _);\n            });\n    } else {\n        /** Browser globals */\n        root.DataMapper = factory(LinearScale, OrdinalScale, _);\n    }\n}(this, function(LinearScale, OrdinalScale, _) {\n\n    /**\n     * Class constructor\n     *\n     * @constructor\n     */\n    var DataMapper = function() {\n        this.scales = [];\n    };\n\n    /**\n     * Adds scale for mapping\n     *\n     * @method addScale\n     * @param {BaseScale} scale Scale to add\n     * @param {Boolean} setAsBase Defines a scale that will be taken as base\n     * @chainable\n     */\n    DataMapper.prototype.addScale = function(scale, setAsBase) {\n\n        this.baseScale = (setAsBase) ? scale : null;\n        this.scales.push(scale);\n    };\n\n    /**\n     * Returns the defined base scale.\n     *\n     * @method getBaseScale\n     * @returns {BaseScale} Base scale defined\n     */\n    DataMapper.prototype.getBaseScale = function() {\n\n        return this.baseScale;\n    };\n\n    /**\n     * Maps a data point, according to the defined scales\n     *\n     * @method map\n     * @param {Object} dataElement Data to be mapped\n     * @param {Number} chartFactor Factor that affects some chart's drawing\n     * @returns {Number} Data position in SVG canvas.\n     */\n    DataMapper.prototype.map = function(dataElement, chartFactor) {\n\n        /** Different scales adds some value to the final position */\n        var pos = 0;\n\n        _.each(this.scales, function(scale) {\n            pos += scale.map(dataElement, chartFactor);\n        });\n\n        return pos;\n    };\n\n    return DataMapper;\n\n}));\n","/**\n * Base class for charts\n * Contains common functionality\n *\n * @class BaseChart\n * @requires d3,\n *           underscore,\n *           d3.chart\n *\n * @author \"Marcio Caraballo <marcio.caraballososa@gmail.com>\"\n */\n\n(function(root, factory) {\n    /** Setting up AMD support*/\n    if (typeof define === 'function' && define.amd) {\n        /** AMD */\n        define('charty/basechart', [\n                'd3.chart',\n                'underscore',\n            ],\n            function(d3, _) {\n                /** Export global even in AMD case in case this script\n                 * is loaded with others */\n                return factory(d3, _);\n            });\n    } else {\n        /** Browser globals */\n        return factory(d3, _);\n    }\n}(this, function(d3, _) {\n\n    d3.chart('BaseChart', {\n        /**\n         * Sets the width for the chart\n         * In case chart contains components, width will\n         * propagate to them\n         *\n         * @method width\n         * @param {Number} newWidth Width for the chart\n         * @chainable\n         */\n        width: function(newWidth) {\n\n            this.w = newWidth;\n            _.each(this._mixins, function(element) {\n                element.width(newWidth);\n            });\n\n            return this;\n        },\n        /**\n         * Sets the height for the chart. Propagates to\n         * components.\n         *\n         * @method height\n         * @param {Number} newHeight Height for the chart\n         */\n        height: function(newHeight) {\n\n            this.h = newHeight;\n            _.each(this._mixins, function(element) {\n                element.height(newHeight);\n            });\n\n            return this;\n        },\n        /**\n         * Sets the scale type for the x data mapping chart.\n         * Propagates to components\n         *\n         * Not all charts use scales. Some can use direct\n         * mapping.\n         *\n         * @method setXScale\n         * @param {Oject} LinearScale, OrdinalScale\n         * @chainable\n         */\n        setXScale: function(scale) {\n\n            this.xscale = scale;\n            _.each(this._mixins, function(element) {\n                element.setXScale(scale);\n            });\n\n            return this;\n        },\n        /**\n         * Sets the scale type for the y data mapping chart.\n         * Propagates to components.\n         *\n         * Not all charts use scales. Some can use direct\n         * mapping.\n         *\n         * @method setYScale\n         * @param {Oject} LinearScale, OrdinalScale\n         * @chainable\n         */\n        setYScale: function(scale) {\n\n            this.yscale = scale;\n            _.each(this._mixins, function(element) {\n                element.setYScale(scale);\n            });\n\n            return this;\n        },\n        /**\n         * Propagates the Event Manager to component parts.\n         *\n         * @method setEventManager\n         * @param {EventManager} evtManager Event Manager for chart.\n         * @chainable\n         */\n        setEventManager: function(evtManager) {\n            this.eventManager = evtManager;\n\n            _.each(this._mixins, function(mixin) {\n                if (mixin.setEventManager) {\n                    mixin.setEventManager(evtManager);\n                }\n            });\n\n            return this;\n        }\n    });\n}));\n","/**\n * Defines a basic chart to process individual data series\n *\n * @class SimpleDataGroup\n * @extends BaseChart\n * @requires d3.chart,\n *           charty,\n *           basechart\n *\n * @author \"Marcio Caraballo <marcio.caraballososa@gmail.com>\"\n */\n\n(function(root, factory) {\n    /** Setting up AMD support*/\n    if (typeof define === 'function' && define.amd) {\n        /** AMD */\n        define('charty/simpledatagroup', [\n                'd3.chart',\n                'charty/chartynames',\n                'charty/basechart'\n            ],\n            function(d3, Charty) {\n                /** Export global even in AMD case in case this script\n                 * is loaded with others */\n                return factory(d3, Charty);\n            });\n    } else {\n        /** Browser globals */\n        factory(d3, Charty);\n    }\n}(this, function(d3, Charty) {\n\n    d3.chart(Charty.CHART_NAMES.BASE_CHART)\n        .extend(Charty.CHART_NAMES.SIMPLE_DATA_GROUP, {\n            /**\n             * Returns the next element of the data collection\n             *\n             * @method transform\n             * @param {Object} data Data Accessor\n             * @return {Object} next element in the collection\n             */\n            transform: function(data) {\n\n                return data.next();\n            }\n        });\n}));\n","/**\n * Basic Axis representation.\n *\n * Only one X/Y is sufficient for chart drawing, but can\n * contain more. The idea is to draw an axis and locate it\n * wherever is necessary.\n *\n * Wether Axis is a BaseChart, no need to extend it, since\n * it will implement all the functions needed.\n *\n * @class Axis\n * @requires d3.chart,\n *           charty\n *\n * @author \"Marcio Caraballo <marcio.caraballososa@gmail.com>\"\n */\n\n(function(root, factory) {\n    /** Setting up AMD support*/\n    if (typeof define === 'function' && define.amd) {\n        /** AMD */\n        define('charty/axis', [\n                'd3.chart',\n                'underscore',\n                'charty/chartynames'\n            ],\n            function(d3, _, Charty) {\n                /** Export global even in AMD case in case this script\n                 * is loaded with others */\n                return factory(d3, _, Charty);\n            });\n    } else {\n        /** Browser globals */\n        factory(d3, _, Charty);\n    }\n}(this, function(d3, _, Charty) {\n\n    d3.chart(Charty.CHART_NAMES.BASE_CHART)\n        .extend(Charty.CHART_NAMES.AXIS, {\n            /**\n             * Basic Axis initialization\n             *\n             * @constructor\n             * @param {Object} args Arguments for axis component\n             */\n            initialize: function() {\n\n                /**\n                 * Tranlation value in the x direction\n                 *\n                 * @property xt\n                 * @type Number\n                 * @default 0\n                 */\n                this.xt = 0;\n                /**\n                 * Tranlation value in the y direction\n                 *\n                 * @property yt\n                 * @type Number\n                 * @default 0\n                 */\n                this.yt = 0;\n\n                /**\n                 * Axis default CSS class\n                 *\n                 * @property cssClass\n                 * @type String\n                 * @default 'axis'\n                 */\n                this.cssClass = 'axis';\n\n                this.axis = d3.svg.axis();\n\n                /**\n                 * Layer options\n                 */\n                var axisLayerOptions = {\n                    /**\n                     * Data bind for axis\n                     * Since axis requires just a scale, only one element\n                     * will be set for the data selection\n                     *\n                     * @method dataBind\n                     * @param {Object} d\n                     */\n                    dataBind: function(d) {\n                        /** Case there is no data to display must be checked */\n                        if (d.getLength()) {\n                            return this.selectAll('g')\n                                .data([true]);\n                        } else {\n                            return this.selectAll('g')\n                                .data([]);\n                        }\n                    },\n\n                    /**\n                     * Insert for axis. Just inserts one svg:g\n                     * element.\n                     *\n                     * @method insert\n                     */\n                    insert: function() {\n                        return this.append('g');\n                    },\n                    events: {\n                        'enter': function() {\n\n                            var chart = this.chart();\n\n                            /**\n                             * Renders as a grid.\n                             */\n                            if (chart.grid) {\n                                chart.axis.tickSize(-chart.tsize, 0, 0);\n                            }\n\n                            /** Axis drawing */\n                            this.classed(chart.cssClass, true);\n\n                            /**\n                             * Axis translation in x or y direction.\n                             */\n                            if (chart.xt !== 0 || chart.yt !== 0) {\n                                this.attr('transform', 'translate(' + chart.xt + ',' + chart.yt + ')');\n                            }\n\n                            /** Adds a text label */\n                            if (chart.textLabel) {\n                                var text = this.append('text')\n                                    .text(chart.textLabel);\n\n                                /** Y Axis label rotation */\n                                if (chart.labelRotate) {\n                                    text.attr('transform', 'translate(' + (-chart.w / 14) + ',' + (chart.h + (chart.textLabel.length * chart.h) / 32) / 2 + ')' +\n                                        ' rotate(' + chart.labelRotate + ')');\n                                } else {\n                                    text.attr('transform', 'translate(' + (chart.w / 2 - chart.textLabel.length * 3.2) + ',' + chart.yt / 6 + ')');\n                                }\n                            }\n\n                            return this;\n                        },\n                        'merge': function() {\n                            var chart = this.chart(),\n                                axis = this.call(chart.axis),\n                                xPos = 5, // Small margin for the text so it doesn't get in the way of the chart.\n                                yPos = -2, // Fixed number of pixes so the text is somewhat centered when rotated.\n                                textAnchor = 'start';\n\n                            if (chart.rotation < 0) {\n                                textAnchor = 'end';\n                                xPos = -xPos;\n                                yPos = -yPos;\n                            }\n                            if (chart.rotation) {\n                                this.selectAll('text')\n                                    .attr('y', yPos)\n                                    .attr('x', xPos)\n                                    .style('text-anchor', textAnchor)\n                                    .attr('transform', 'rotate(' + chart.rotation + ')');\n                            }\n                            return axis;\n                        },\n                        'remove': function() {\n\n                            return this.remove();\n                        }\n                    }\n                };\n\n                /**\n                 * Axis layer creation\n                 */\n                this.layer('axis', this.base.append('g'), axisLayerOptions);\n            },\n            /**\n             * Sets tick size for the axis\n             *\n             * @method tickSize\n             * @param {Number} size ticksize\n             * @chainable\n             */\n            tickSize: function(size) {\n                /**\n                 * Size for the ticks. Necessary\n                 * to define a grid chart.\n                 *\n                 * @property tsize\n                 * @type Number\n                 * @default 0\n                 */\n                this.tsize = (size || 0);\n                return this;\n            },\n            /**\n             * Sets the scale that will be used for the axis\n             *\n             * @method setScale\n             * @param {Object} d3.scale\n             * @chainable\n             */\n            setScale: function(scale) {\n                if (!scale) {\n                    throw new Error('Undefined scale for axis.');\n                }\n\n                this.axis.scale(scale.getScale());\n                return this;\n            },\n            /**\n             * Shows the axis as a grid\n             *\n             * @method showAsGrid\n             * @param {Boolean} val true/false value\n             * @chainable\n             * @default false\n             */\n            showAsGrid: function(val) {\n                this.grid = val;\n                return this;\n            },\n            /**\n             * Sets axis orientation\n             *\n             * @method orient\n             * @param {String} orient\n             * @chainable\n             * @default bottom\n             */\n            orient: function(orient) {\n\n                this.axis.orient(orient || 'bottom');\n                return this;\n            },\n            /**\n             * Sets x translation for axis.\n             *\n             * @method xtranslate\n             * @param {Number} t tranlation value\n             * @chainable\n             */\n            xtranslate: function(t) {\n                this.xt = t;\n                return this;\n            },\n            /**\n             * Sets y translation for axis.\n             *\n             * @method ytranslate\n             * @param {Number} t tranlation value\n             * @chainable\n             */\n            ytranslate: function(t) {\n                this.yt = t;\n                return this;\n            },\n            /**\n             * Text label that will be set next to the axis\n             *\n             * @method setTextLabel\n             * @param {String} label Text label\n             * @param {Number} labelRotate Rotation for y axis label\n             * @chainable\n             */\n            setTextLabel: function(label, labelRotate) {\n                this.textLabel = label;\n                this.labelRotate = labelRotate;\n                return this;\n            },\n            /**\n             * Custom tick count setting for particular\n             * axis.\n             *\n             * This options will only work in linear scales,\n             * since the domain, by defaut, is continuous.\n             *\n             * @method tickCount\n             * @param {Number} tCount ticks count\n             * @chainable\n             */\n            tickCount: function(tCount) {\n                if (tCount) {\n                    this.axis.ticks(tCount);\n                }\n                return this;\n            },\n            /**\n             * Tick format\n             *\n             * @method tickFormat\n             * @param {String|Function} format Tick formatter.\n             * @chainable\n             */\n            tickFormat: function(format) {\n                if (_.isString(format)) {\n                    this.axis.tickFormat(d3.format(format));\n                } else if (_.isFunction(format)) {\n                    this.axis.tickFormat(format);\n                }\n                return this;\n            },\n            /**\n             * Sets CSS Class\n             *\n             * @method setClass\n             * @param {String} newClass A CSS class to use on the axis\n             * @chainable\n             */\n            setClass: function(newClass) {\n                if (newClass) {\n                    this.cssClass = newClass;\n                }\n                return this;\n            },\n            /**\n             * Sets rotation of tick labels\n             *\n             * @method setRotation\n             * @param {Number} degrees The number in degrees for the label to be rotated.\n             *   The expected number should be between -90 and 90.\n             * @chainable\n             */\n            setRotation: function(degrees) {\n                if (degrees) {\n                    this.rotation = degrees;\n                }\n                return this;\n            }\n        });\n}));\n","/**\n * Bar drawer. Takes only one data series as input.\n *\n * @class Bar\n * @extends SimpleDataGroup\n * @requires d3.chart,\n *           charty,\n *           simpledatagroup\n *\n * @author \"Marcio Caraballo <marcio.caraballososa@gmail.com>\"\n */\n\n(function(root, factory) {\n    /** Setting up AMD support*/\n    if (typeof define === 'function' && define.amd) {\n        /** AMD */\n        define('charty/bar', [\n                'd3.chart',\n                'charty/chartynames',\n                'charty/simpledatagroup'\n            ],\n            function(d3, Charty) {\n                /** Export global even in AMD case in case this script\n                 * is loaded with others*/\n                return factory(d3, Charty);\n            });\n    } else {\n        /** Browser globals */\n        factory(d3, Charty);\n    }\n}(this, function(d3, Charty) {\n    d3.chart(Charty.CHART_NAMES.SIMPLE_DATA_GROUP)\n        .extend(Charty.CHART_NAMES.BAR, {\n            /**\n             * Bar initialization\n             *\n             * @constructor\n             * @param {Object} args Arguments for axis component\n             */\n            initialize: function() {\n\n                /**\n                 * Sets only bar color as default.\n                 */\n                var defaults = {\n                    c: 'bar-default'\n                };\n\n                var options = {\n                    /**\n                     * Data bind for a bar serie.\n                     * Can have a color set for the whole serie, or\n                     * each bar can have an own color defined.\n                     *\n                     * @method dataBind\n                     * @param {Object} d example = {\n                     *                               color : 'red',\n                     *                               data = [\n                     *                                {x : 'Jan', y : 200, c : 'blue'}\n                     *                               ]\n                     *                            }\n                     * @chainable\n                     */\n                    dataBind: function(d) {\n\n                        var chart = this.chart();\n\n                        /**\n                         * Sets color for the whole data serie.\n                         */\n                        chart.c = (d.c || defaults.c);\n\n                        return this.selectAll('rect')\n                            .data(d.data);\n                    },\n                    /**\n                     * Inserts a svg:rect element.\n                     *\n                     * @method insert\n                     * @chainable\n                     */\n                    insert: function() {\n                        return this.append('rect');\n                    },\n                    events: {\n                        /** Events are set, drawing of new elements is handled by merger */\n                        'enter': function() {\n                            this.chart()\n                                .eventManager.bindAll(this);\n\n                            return this;\n                        },\n                        'merge': function() {\n\n                            var chart = this.chart(),\n                                zeroY = chart.yscale.map(0),\n                                heightZeroY = chart.h - zeroY;\n\n                            /**\n                             * chart.factor : value used to define bar's width. It can\n                             * be useful to reduce the width, in case many data series\n                             * are draw using bars.\n                             */\n                            this.attr('class', function(d) {\n                                return (d.c || chart.c);\n                            })\n                                .attr('x', function(d) {\n                                    var pos = 0;\n                                    if (chart.zScale) {\n                                        pos += chart.zScale.map(d.z, 1);\n                                    }\n                                    return (pos += chart.xscale.map(d.x, (chart.factor || 1)));\n                                })\n                                .attr('width', chart.xscale.band(chart.factor || 1))\n                                .attr('y', function(d) {\n                                    return Math.min(zeroY, chart.yscale.map(d.y, chart.factor));\n                                })\n                                .attr('height', function(d) {\n                                    return Math.abs(chart.yscale.band(chart.h, d.y) - heightZeroY);\n                                });\n\n                            return this;\n                        },\n                        'exit': function() {\n\n                            return this.remove();\n                        }\n                    }\n                };\n\n                /**\n                 * Layer creation\n                 */\n                this.layer('barlayer', this.base.append('g'), options);\n            },\n            /**\n             * Adds z scale if necessary\n             *\n             * @method setZScale\n             * @param {Object} zScale d3.scale for mapping along x axis. In fact,\n             * is the second scale for this axis.\n             * @chainable\n             */\n            setZScale: function(zScale) {\n                this.zScale = zScale;\n                return this;\n            }\n        });\n}));\n","/**\n * Bar drawer. Takes only one data series as input.\n * Extends Bar component, since only merge will be redefined.\n *\n * @class HorizontalBar\n * @constructor\n * @extends Bar\n * @requires d3.chart,\n *           charty,\n *           bar\n *\n * @author \"Marcio Caraballo <marcio.caraballososa@gmail.com>\"\n */\n\n(function(root, factory) {\n    /** Setting up AMD support*/\n    if (typeof define === 'function' && define.amd) {\n        /** AMD */\n        define('charty/horizontalbar', [\n                'd3.chart',\n                'charty/chartynames',\n                'charty/bar'\n            ],\n            function(d3, Charty) {\n                /** Export global even in AMD case in case this script\n                 * is loaded with others*/\n                return factory(d3, Charty);\n            });\n    } else {\n        /** Browser globals */\n        factory(d3, Charty);\n    }\n}(this, function(d3, Charty) {\n    d3.chart(Charty.CHART_NAMES.BAR)\n        .extend(Charty.CHART_NAMES.HORIZONTAL_BAR, {\n            /**\n             * Horizontal bars initialization\n             *\n             * @constructor\n             * @param {Object} args Arguments for horizontal bar component.\n             */\n            initialize: function() {\n\n                var barLayer = this.layer('barlayer');\n\n                /** Necessary for the way d3.chart handles events */\n                barLayer.off('merge');\n                barLayer.on('merge', function() {\n\n                    var chart = this.chart(),\n                        zeroX = chart.xscale.map(0);\n\n                    this.attr('class', function(d) {\n                        return (d.c || chart.c);\n                    })\n                        .attr(\"x\", function(d) {\n                            return chart.xscale.map(Math.min(0, d.x), chart.factor);\n                        })\n                        .attr(\"y\", function(d) {\n                            return chart.yscale.map(d.y, chart.factor);\n                        })\n                        .attr(\"width\", function(d) {\n                            return Math.abs(chart.xscale.map(d.x) - zeroX);\n                        })\n                        .attr(\"height\", chart.yscale.band(chart.factor));\n\n                    return this;\n                });\n            }\n        });\n}));\n","/**\n * Win Loss Bar drawer. Takes only one data series as input.\n *\n * Win Loss bar data elements allow the following options:\n *\n *  {\n *    x: 'Jan',\n *    y: 200,\n *    c: 'String',\n *    reset: false\n *  }\n *\n * The reset parameter is a boolean that resets the offset of\n *   the graph back to 0.\n *\n * @class WinLossBar\n * @extends Bar\n * @requires d3.chart,\n *           charty,\n *           bar\n *\n * @author \"Cesar Del Soldato <cesards@gmail.com>\"\n */\n(function(root, factory) {\n    /** Setting up AMD support*/\n    if (typeof define === 'function' && define.amd) {\n        /** AMD */\n        define('charty/winlossbar', [\n                'd3.chart',\n                'charty/chartynames',\n                'charty/simpledatagroup',\n                'charty/bar'\n            ],\n            function(d3, Charty) {\n                /** Export global even in AMD case in case this script\n                 * is loaded with others*/\n                return factory(d3, Charty);\n            });\n    } else {\n        /** Browser globals */\n        factory(d3, Charty);\n    }\n}(this, function(d3, Charty) {\n    d3.chart(Charty.CHART_NAMES.BAR)\n        .extend(Charty.CHART_NAMES.WIN_LOSS_BAR, {\n            /**\n             * Win Loss Bar initialization\n             *\n             * @constructor\n             * @param {Object} args Arguments for axis component\n             */\n            initialize: function() {\n\n                /**\n                 * Sets offset for bars.\n                 */\n                var offset = 0;\n\n                /**\n                 * Layers extensions.\n                 */\n                this.layer('barlayer')\n                    .on('merge', function() {\n\n                        var chart = this.chart(),\n                            zeroY = chart.yscale.map(0);\n\n                        this.attr('class', function(d) {\n\n                            var customValue = d.c || chart.c || '';\n\n                            if (d.y > 0) {\n                                return 'win ' + customValue;\n                            } else {\n                                return 'loss ' + customValue;\n                            }\n                            return (d.c || chart.c);\n                        })\n                            .attr('y', function(d) {\n                                var yScaleMap = chart.yscale.map(d.y, chart.factor),\n                                    yPos;\n\n                                // Reset the offset if the element asks for it.\n                                if (d.reset) {\n                                    offset = 0;\n                                }\n\n                                yPos = Math.min(zeroY, yScaleMap) + offset;\n                                offset = offset + yScaleMap - zeroY;\n                                return yPos;\n                            });\n\n                        return this;\n                    });\n            }\n        });\n}));\n","/**\n * Circle drawer.\n *\n * @class Circle\n * @extends SimpleDataGroup\n * @requires d3.chart,\n *           underscore,\n *           simpledatagroup\n *\n * @author \"Marcio Caraballo <marcio.caraballososa@gmail.com>\"\n */\n(function(root, factory) {\n    /** Setting up AMD support*/\n    if (typeof define === 'function' && define.amd) {\n        /** AMD */\n        define('charty/circle', [\n                'd3.chart',\n                'charty/chartynames',\n                'charty/simpledatagroup'\n            ],\n            function(d3, Charty) {\n                /** Export global even in AMD case in case this script\n                 * is loaded with others */\n                return factory(d3, Charty);\n            });\n    } else {\n        /** Browser globals */\n        factory(d3, Charty);\n    }\n}(this, function(d3, Charty) {\n    d3.chart(Charty.CHART_NAMES.SIMPLE_DATA_GROUP)\n        .extend(Charty.CHART_NAMES.CIRCLE, {\n            /**\n             * Circle initializator\n             *\n             * @constructor\n             * @param {Object} args Arguments for the circle component.\n             */\n            initialize: function(args) {\n\n                var dataValidator = args.dataValidator,\n                    errors = {\n                        invalidRadio: 'Invalid value : radius for circles must be positive.'\n                    };\n\n                /**\n                 * Defaults for circles.\n                 *\n                 * r : circle radius\n                 * c : circle color\n                 */\n                var defaults = {\n                    r: 5,\n                    c: 'circle-default'\n                };\n\n                var options = {\n                    /**\n                     * Data bind for a circle serie.\n                     * Can have color and circle radius set for the whole serie,\n                     * or own values for each data point.\n                     *\n                     * @method dataBind\n                     * @param {Object} d example = {\n                     *                              color : 'red',\n                     *                              r : 5\n                     *                              data : [\n                     *                                {x : 'Jan', y: 300, c : 'blue', r : 20}\n                     *                              ]\n                     *                            }\n                     * @chainable\n                     */\n                    dataBind: function(d) {\n\n                        var chart = this.chart();\n\n                        chart.c = (d.c || defaults.c);\n                        chart.r = (dataValidator.isPositiveNumber(d.r, errors.invalidRadio) || defaults.r);\n\n                        return this.selectAll('circle')\n                            .data(d.data);\n                    },\n                    /**\n                     * Appends a svg:circle\n                     *\n                     * @method insert\n                     * @chainable\n                     */\n                    insert: function() {\n                        return this.append('circle');\n                    },\n                    events: {\n                        'enter': function() {\n                            this.chart()\n                                .eventManager.bindAll(this);\n\n                            return this;\n                        },\n                        'merge': function() {\n                            /** No click event handled on update */\n                            var chart = this.chart();\n\n                            this.attr('class', function(d) {\n                                return (d.c || chart.c);\n                            })\n                                .attr(\"r\", function(d) {\n                                    return (d.r || chart.r);\n                                })\n                                .attr('cx', function(d) {\n                                    return chart.xscale.map(d.x, 0);\n                                })\n                                .attr('cy', function(d) {\n                                    return chart.yscale.map(d.y, 0);\n                                })\n                                .attr('dx', function(d) {\n                                    return d.x;\n                                })\n                                .attr('dy', function(d) {\n                                    return d.y;\n                                });\n\n                            return this;\n                        },\n                        'exit': function() {\n\n                            return this.remove();\n                        }\n                    }\n                };\n\n                /**\n                 * Layer creation\n                 */\n                this.layer('circles', this.base.append('g'), options);\n            }\n        });\n}));\n","/**\n * Donut drawer.\n *\n * @class Donut\n * @extends SimpleDataGroup\n * @requires d3,\n *           underscore,\n *           d3.chart,\n *           charty,\n *           simpledatagroup\n *\n * @author \"Marcio Caraballo <marcio.caraballososa@gmail.com>\"\n */\n\n(function(root, factory) {\n    /** Setting up AMD support*/\n    if (typeof define === 'function' && define.amd) {\n        /** AMD */\n        define('charty/donut', [\n                'd3.chart',\n                'charty/chartynames',\n                'charty/simpledatagroup'\n            ],\n            function(d3, Charty) {\n                /** Export global even in AMD case in case this script\n                 * is loaded with others */\n                return factory(d3, Charty);\n            });\n    } else {\n        /** Browser globals */\n        factory(d3, Charty);\n    }\n}(this, function(d3, Charty) {\n    d3.chart(Charty.CHART_NAMES.SIMPLE_DATA_GROUP)\n        .extend(Charty.CHART_NAMES.DONUT, {\n            /**\n             * Donut initialization\n             *\n             * @constructor\n             * @param {Object} args Arguments for the donut chart.\n             */\n            initialize: function(args) {\n\n                var dataValidator = args.dataValidator,\n                    errors = {\n                        invalidRadius: 'Radius for donut chart must be numerical values'\n                    };\n\n                /**\n                 * ir : inner radius\n                 * or : outter radius\n                 */\n                var defaults = {\n                    ir: 90,\n                    or: 50\n                };\n\n                /**\n                 * d3 layout for pie data mapping.\n                 */\n                var pieLayout = d3.layout\n                    .pie()\n                    .sort(null)\n                    .value(function(d) {\n                        return d.y;\n                    });\n\n                var arcGen = d3.svg.arc();\n\n                var options = {\n                    /**\n                     * Data bind for donut.\n                     * Will take x elements as data for drawing\n                     * or : outter radius\n                     * ir : inner radius\n                     * Each part of the donut must have a color set\n                     *\n                     * @method dataBind\n                     * @param {Object} data example = {\n                     *                                  ir : 150,\n                     *                                  or : 100,\n                     *                                  xPosition : 100,\n                     *                                  yPosition : 100,\n                     *                                  data : [\n                     *                                    {x : 200, c: 'red' }\n                     *                                    {x : 500, c: 'blue'}\n                     *                                  ]\n                     *                                }\n                     */\n                    dataBind: function(data) {\n\n                        var chart = this.chart();\n\n                        /** By default, donut will be centered in svg */\n                        chart.xPosition = (data.xPosition || (chart.w / 2));\n                        chart.yPosition = (data.yPosition || (chart.h / 2));\n\n                        /** Radius definition */\n                        var ir = (dataValidator.isNumber(data.ir, errors.invalidRadius) || defaults.ir),\n                            or = (dataValidator.isNumber(data.or, errors.invalidRadius) || defaults.or);\n\n                        arcGen = arcGen.innerRadius(ir)\n                            .outerRadius(or);\n\n                        return this.selectAll('path')\n                            .data(pieLayout(data.data));\n                    },\n                    /**\n                     * Adds a svg:path element for the donut\n                     *\n                     * @method insert\n                     * @chainable\n                     */\n                    insert: function() {\n                        return this.append('path');\n                    },\n                    events: {\n                        'enter': function() {\n                            this.chart()\n                                .eventManager.bindAll(this);\n\n                            return this;\n                        },\n                        'merge': function() {\n\n                            var chart = this.chart();\n\n                            /** No click event is considered, it should be added on enter */\n                            this.attr('transform', 'translate(' + (chart.xPosition) + ',' + (chart.yPosition) + ')')\n                                .attr('class', function(d) {\n\n                                    return d.data.c;\n                                })\n                                .attr('d', arcGen);\n\n                            return this;\n                        },\n                        'exit': function() {\n\n                            return this.remove();\n                        }\n                    }\n                };\n\n                /**\n                 * Layer creation\n                 */\n                this.layer('paths', this.base.append('g'), options);\n            }\n        });\n}));\n","/**\n * Line drawing.\n *\n * Note : this charts doesn't take events, as it doesn't seem necessary for now.\n *\n * @class Line\n * @extends SimpleDataGroup\n * @requires d3.chart,\n *           charty,\n *           simpledatagroup\n *\n * @author \"Marcio Caraballo <marcio.caraballososa@gmail.com>\"\n */\n\n(function(root, factory) {\n    /** Setting up AMD support*/\n    if (typeof define === 'function' && define.amd) {\n        /** AMD */\n        define('charty/line', [\n                'd3.chart',\n                'charty/chartynames',\n                'charty/simpledatagroup'\n            ],\n            function(d3, Charty) {\n                /** Export global even in AMD case in case this script\n                 * is loaded with others */\n                return factory(d3, Charty);\n            });\n    } else {\n        /** Browser globals */\n        factory(d3, Charty);\n    }\n}(this, function(d3, Charty) {\n    d3.chart(Charty.CHART_NAMES.SIMPLE_DATA_GROUP)\n        .extend(Charty.CHART_NAMES.LINE, {\n            /**\n             * Line initialization\n             *\n             * @constructor\n             * @param {Object} args Arguments for the line component.\n             */\n            initialize: function() {\n\n                /**\n                 * c : default color line\n                 */\n                var defaults = {\n                    c: 'line-default'\n                };\n\n                var line = d3.svg.line();\n\n                var options = {\n                    /**\n                     * Data bind for a line serie.\n                     * Since a line is drawed using d3.line\n                     * a datum must be defined. Can also have a color\n                     * for the whole serie.\n                     *\n                     * @method dataBind\n                     * @param {Object} d example = {\n                     *                              color : 'redline'\n                     *                              data : [\n                     *                                {x : 'Jan', y: 200},\n                     *                                ...\n                     *                              ]\n                     *                            }\n                     */\n                    dataBind: function(d) {\n\n                        var chart = this.chart();\n\n                        line.x(function(d) {\n                            return chart.xscale.map(d.x, 0);\n                        })\n                            .y(function(d) {\n                                return chart.yscale.map(d.y, 0);\n                            });\n\n                        chart.datum = d.data;\n                        chart.c = (d.c || defaults.c);\n\n                        return this.selectAll('path')\n                            .data([0]);\n\n                    },\n                    /**\n                     * Appends a svg:path\n                     *\n                     * @method insert\n                     * @chainable\n                     */\n                    insert: function() {\n\n                        return this.append('path');\n                    },\n                    events: {\n                        'merge': function() {\n\n                            var chart = this.chart();\n\n                            this.datum(chart.datum)\n                                .classed(chart.c, true)\n                                .attr('d', line);\n\n                            return this;\n                        },\n                        'exit': function() {\n\n                            return this.remove();\n                        }\n                    }\n                };\n\n                /**\n                 * Layer creation\n                 */\n                this.layer('lineslayer', this.base.append('g'), options);\n            }\n        });\n}));\n","/**\n * Rounded rectangle drawer.\n *\n * @class RoundedRectangle\n * @extends SimpleDataGroup\n * @requires d3.chart,\n *           charty,\n *           simpledatagroup\n *\n * @author \"Marcio Caraballo <marcio.caraballososa@gmail.com>\"\n */\n\n(function(root, factory) {\n    /** Setting up AMD support*/\n    if (typeof define === 'function' && define.amd) {\n        /** AMD */\n        define('charty/roundedrectangle', [\n                'd3.chart',\n                'underscore',\n                'charty/chartynames',\n                'charty/simpledatagroup'\n            ],\n            function(d3, _, Charty) {\n                /** Export global even in AMD case in case this script\n                 * is loaded with others */\n                return factory(d3, _, Charty);\n            });\n    } else {\n        // Browser globals\n        factory(d3, _, Charty);\n    }\n}(this, function(d3, _, Charty) {\n    d3.chart(Charty.CHART_NAMES.SIMPLE_DATA_GROUP)\n        .extend(Charty.CHART_NAMES.ROUNDED_RECTANGLE, {\n            /**\n             * Rounded rectangle initialization.\n             *\n             * @constructor\n             * @param {Object} args Arguments for rounded rectangles component.\n             */\n            initialize: function(args) {\n\n                var dataValidator = args.dataValidator,\n                    errors = {\n                        invalidRH: 'Invalid value for rectangle height. Must be positive number.',\n                        invalidRW: 'Invalid value for rectangle width. Must be positive number.',\n                        invalidRX: 'Invalid value for rectangle rx. Must be positive number.',\n                        invalidRY: 'Invalid value for rectangle ry. Must be positive number.'\n                    };\n\n                /**\n                 * Defaults for rectangle\n                 *\n                 * rh : rectangle height\n                 * rw : rectangle width\n                 * rc : rectangle color\n                 * rx, ry : value for rounded corners\n                 */\n                var defaults = {\n                    rh: 20,\n                    rw: 20,\n                    rc: 'rounded-rectangle-default',\n                    rx: 5,\n                    ry: 5\n                };\n\n                var options = {\n                    /**\n                     * Data bind for Rounded Rectangle.\n                     * Data defines a rectangle height (rh), width (rw),\n                     * color (rc), rx, ry. If not defined, defauls are\n                     * used.\n                     *\n                     * @method dataBind\n                     * @param {Object} d example = {\n                     *                              rh : 20,\n                     *                              rw : 20,\n                     *                              rc : 'red'\n                     *                              data : [...]\n                     *                            }\n                     * @chainable\n                     */\n                    dataBind: function(d) {\n                        var chart = this.chart();\n\n                        chart.rh = (dataValidator.isPositiveNumber(d.rh, errors.invalidRH) || defaults.rh);\n                        chart.rw = (dataValidator.isPositiveNumber(d.rw, errors.invalidRH) || defaults.rw);\n                        chart.rx = (dataValidator.isPositiveNumber(d.rx, errors.invalidRX) || defaults.rx);\n                        chart.ry = (dataValidator.isPositiveNumber(d.ry, errors.invalidRY) || defaults.ry);\n                        chart.rc = (d.rc || defaults.rc);\n\n                        return this.selectAll('rect').data(d.data);\n                    },\n                    /**\n                     * Appends a svg:rect element.\n                     *\n                     * @method insert\n                     * @chainable\n                     */\n                    insert: function() {\n                        return this.append('rect');\n                    },\n\n                    events: {\n                        enter: function() {\n                            this.chart()\n                                .eventManager.bindAll(this);\n\n                            return this;\n                        },\n\n                        merge: function() {\n                            var chart = this.chart();\n\n                            this.attr('height', chart.rh)\n                                .attr('width', chart.rw)\n                                .attr('rx', chart.rx)\n                                .attr('ry', chart.ry)\n                                .attr('x', _.partial(chart.x, chart))\n                                .attr('y', _.partial(chart.y, chart))\n                                .attr('class', _.partial(chart['class'], chart));\n\n                            return this;\n                        },\n\n                        exit: function() {\n                            return this.remove();\n                        }\n                    }\n                };\n\n                /**\n                 * Layer creation\n                 */\n                this.layer('roundedrects', this.base, options);\n            },\n\n            /**\n            Calculate `x` to be centered horizontally.\n            **/\n            x: function(chart, d) {\n                return chart.xscale.map(d.x, 1) + (chart.xscale.band(1) / 2) - (chart.rw / 2);\n            },\n\n            /**\n            Calculate `y` to be centered vertically.\n            **/\n            y: function(chart, d) {\n                return chart.yscale.map(d.y) - chart.rh;\n            },\n\n            /**\n            Class attribute generation.\n            **/\n            'class': function(chart, d) {\n                return d.rc || chart.rc;\n            }\n        });\n}));\n","/**\n * Text labeling.\n *\n * @class Text\n * @extends SimpleDataGroup\n * @requires d3.chart,\n *          charty,\n *          simpledatagroup\n *\n * @author \"Marcio Caraballo <marcio.caraballososa@gmail.com>\"\n */\n\n(function(root, factory) {\n    /** Setting up AMD support*/\n    if (typeof define === 'function' && define.amd) {\n        /** AMD */\n        define('charty/text', [\n                'd3.chart',\n                'charty/chartynames',\n                'charty/simpledatagroup'\n            ],\n            function(d3, Charty) {\n                /** Export global even in AMD case in case this script\n                 * is loaded with others */\n                return factory(d3, Charty);\n            });\n    } else {\n        /** Browser globals */\n        factory(d3, Charty);\n    }\n}(this, function(d3, Charty) {\n\n    var Label = {\n        /**\n         * @constructor\n         * Text label initializator\n         */\n        initialize: function() {\n            var options = {\n                /**\n                 * Data bind for text labeling.\n                 * Can depend on other elements, for instance,\n                 * the rounded rectangles to form a label.\n                 *\n                 * @method dataBind\n                 * @param {Object} d example = {\n                 *                              data : [...]\n                 *                            }\n                 */\n                dataBind: this.dataBind,\n                /**\n                 * Insert a svg:text element for each data input.\n                 *\n                 * @method insert\n                 * @chainable\n                 */\n                insert: this.insert,\n\n                events: {\n                    enter: this.enter,\n                    merge: this.merge,\n                    exit: this.exit\n                }\n            };\n\n          /**\n          Layer creation\n          **/\n          this.layer('texts', this.base.append('g'), options);\n        },\n\n        /**\n        Calculate `x` to be centered horizontally.\n        **/\n        x: function(chart, d) {\n            return chart.xscale.map(d.x, 1) + (chart.xscale.band(1) / 2);\n        },\n\n        /**\n        Calculate `y` to be centered vertically.\n        **/\n        y: function(chart, d) {\n            return chart.yscale.map(d.y) - 15;\n        },\n\n        /**\n        Placeholder to set a \"x\" offset.\n        No Op.\n        **/\n        dx: function(chart, d) {\n            return '';\n        },\n\n        /**\n        Placeholder to set a \"y\" offset.\n        No Op.\n        **/\n        dy: function(chart, d) {\n            return '';\n        },\n\n        /**\n        Text data accessor.\n\n        @see https://github.com/mbostock/d3/wiki/Selections#wiki-text\n        **/\n        text: function(d) {\n            return d.y;\n        },\n\n\n        /**** Custom Events Data Accessors ****/\n\n        dataBind: function(d) {\n            return this.selectAll('text')\n                .data(d.data);\n        },\n\n        insert: function() {\n            return this.append('text');\n        },\n\n        enter: function() {\n            var chart = this.chart();\n\n            this.attr('text-anchor', 'middle')\n                .attr('dy', '0.35em');\n\n            chart.eventManager.bindAll(this);\n\n            return this;\n        },\n\n        merge: function() {\n            var chart = this.chart();\n\n            this.attr('x', _.partial(chart.x, chart))\n                .attr('y', _.partial(chart.y, chart))\n                .attr('dx', _.partial(chart.dx, chart))\n                .attr('dy', _.partial(chart.dy, chart))\n                .text(chart.text);\n\n            return this;\n        },\n\n        exit: function() {\n            return this.remove();\n        }\n    };\n\n    d3.chart(Charty.CHART_NAMES.SIMPLE_DATA_GROUP)\n        .extend(Charty.CHART_NAMES.TEXT, Label);\n}));\n","/**\n * Text labeling above the data element. Redefindes \"merge\"\n * Useful for vertical bar chart\n *\n * @class AboveText\n * @extends Text\n * @requires d3.chart,\n *           charty,\n *           text\n *\n * @author \"Marcio Caraballo <marcio.caraballososa@gmail.com>\"\n */\n\n(function(root, factory) {\n    /** Setting up AMD support*/\n    if (typeof define === 'function' && define.amd) {\n        /** AMD */\n        define('charty/abovetext', [\n                'd3.chart',\n                'charty/chartynames',\n                'charty/text'\n            ],\n            function(d3, Charty) {\n                /** Export global even in AMD case in case this script\n                 * is loaded with others */\n                return factory(d3, Charty);\n            });\n    } else {\n        /** Browser globals */\n        factory(d3, Charty);\n    }\n}(this, function(d3, Charty) {\n    d3.chart(Charty.CHART_NAMES.TEXT)\n        .extend(Charty.CHART_NAMES.ABOVE_TEXT, {\n            /**\n             * @constructor\n             * @param {Object} args Arguments for above text component.\n             */\n            initialize: function() {\n                var textLayer = this.layer('texts');\n\n                textLayer.off('merge');\n                textLayer.on('merge', function() {\n                    var chart = this.chart(),\n                        zeroY = chart.yscale.map(0);\n\n                    this.attr('x', function(d) {\n                        var pos = 0;\n                        if (chart.zScale) {\n                            pos += chart.zScale.map(d.z, 1);\n                        }\n\n                        return (pos += chart.xscale.map(d.x, (chart.factor || 1)) + (chart.xscale.band(chart.factor || 1) / 2));\n                    })\n                        .attr('y', function(d) {\n                            return Math.min(zeroY, chart.yscale.map(d.y, chart.factor)) - 7;\n                        })\n                        .text(chart.text);\n                });\n            }\n        });\n}));\n","/**\n * Text labeling right to the data element. Redefindes \"merge\"\n * Useful for horizonal bar chart\n *\n * @class RightText\n * @extends Text\n * @requires d3.chart,\n *           charty,\n *           text\n *\n * @author \"Marcio Caraballo <marcio.caraballososa@gmail.com>\"\n */\n\n(function(root, factory) {\n    /** Setting up AMD support*/\n    if (typeof define === 'function' && define.amd) {\n        /** AMD */\n        define('charty/righttext', [\n                'd3.chart',\n                'charty/chartynames',\n                'charty/text'\n            ],\n            function(d3, Charty) {\n                /** Export global even in AMD case in case this script\n                 * is loaded with others */\n                return factory(d3, Charty);\n            });\n    } else {\n        /** Browser globals */\n        factory(d3, Charty);\n    }\n}(this, function(d3, Charty) {\n    d3.chart(Charty.CHART_NAMES.TEXT)\n        .extend(Charty.CHART_NAMES.RIGHT_TEXT, {\n            /**\n             * @constructor\n             * @param {Object} args Arguments for right text component.\n             */\n            initialize: function() {\n                var textLayer = this.layer('texts');\n\n                textLayer.off('merge');\n                textLayer.on('merge', function() {\n\n                    var chart = this.chart();\n\n                    this.attr('x', function(d) {\n                        return chart.xscale.map(d.x, chart.factor) + 12;\n                    })\n                        .attr('y', function(d) {\n                            return chart.yscale.map(d.y, chart.factor) + chart.yscale.band(chart.factor || 1) / 2;\n                        })\n                        .text(chart.text);\n\n                    return this;\n                });\n            }\n        });\n}));\n","/**\n * Text labeling in the middle the data element with Win Loss offser calculation.\n * Redefindes \"merge\"\n * Useful for vertical bar chart.\n *\n * @class AboveText\n * @extends Text\n * @requires d3.chart,\n *           charty,\n *           text\n *\n * @author \"Cesar Del Soldato <cesards@gmail.com>\"\n */\n\n(function(root, factory) {\n    /** Setting up AMD support*/\n    if (typeof define === 'function' && define.amd) {\n        /** AMD */\n        define('charty/winlosstext', [\n                'd3.chart',\n                'charty/chartynames',\n                'charty/text'\n            ],\n            function(d3, Charty) {\n                /** Export global even in AMD case in case this script\n                 * is loaded with others */\n                return factory(d3, Charty);\n            });\n    } else {\n        /** Browser globals */\n        factory(d3, Charty);\n    }\n}(this, function(d3, Charty) {\n    d3.chart(Charty.CHART_NAMES.TEXT)\n        .extend(Charty.CHART_NAMES.WIN_LOSS_TEXT, {\n            /**\n             * @constructor\n             * @param {Object} args Arguments for above text component.\n             */\n            initialize: function() {\n\n                var textLayer = this.layer('texts');\n\n                /**\n                 * Sets offset for label.\n                 */\n                var offset = 0;\n\n                textLayer.off('merge');\n                textLayer.on('merge', function() {\n\n                    var chart = this.chart(),\n                        zeroY = chart.yscale.map(0),\n                        heightZeroY = chart.h - zeroY;\n\n                    this.attr('x', function(d) {\n                        var pos = 0;\n                        if (chart.zScale) {\n                            pos += chart.zScale.map(d.z, 1);\n                        }\n\n                        return (pos += chart.xscale.map(d.x, (chart.factor || 1)) + (chart.xscale.band(chart.factor || 1) / 2));\n                    })\n                        .attr('y', function(d) {\n                            var yScaleMap = chart.yscale.map(d.y, chart.factor),\n                                yPos;\n\n                            // Reset the offset if the element asks for it.\n                            if (d.reset) {\n                                offset = 0;\n                            }\n\n                            yPos = yScaleMap + offset + (chart.yscale.band(chart.h, d.y) - heightZeroY) / 2;\n                            offset = offset + yScaleMap - zeroY;\n                            return yPos;\n                        })\n                        .text(chart.text);\n                });\n            }\n        });\n}));\n","/**\n * Text labeling with a custom text. The label is placed in the middle of\n * the data point (x and y).\n *\n * @class LabeledText\n * @extends Text\n * @requires d3.chart,\n *           charty,\n *           text\n *\n * @author \"Mauro Buselli <maurobuselli@gmail.com>\"\n */\n(function(root, factory) {\n    /** Setting up AMD support*/\n    if (typeof define === 'function' && define.amd) {\n        /** AMD */\n        define('charty/labeledtext', [\n                'd3.chart',\n                'charty/chartynames',\n                'charty/text'\n            ],\n            function(d3, Charty) {\n                /** Export global even in AMD case in case this script\n                 * is loaded with others */\n                return factory(d3, Charty);\n            });\n    } else {\n        /** Browser globals */\n        factory(d3, Charty);\n    }\n}(this, function(d3, Charty) {\n\n    d3.chart(Charty.CHART_NAMES.TEXT)\n        .extend(Charty.CHART_NAMES.LABELED_TEXT, {\n            x: function(chart, d) {\n                return d.label ? chart.xscale.map(d.x, 1) : 0;\n            },\n\n            y: function(chart, d) {\n                return d.label ? chart.yscale.map(d.y) : 0;\n            },\n\n            dx: function(chart, d) {\n                return (d.label && d.label.text) ? (-(d.label.text.toString().length / 4) + 'em') : 0;\n            },\n\n            dy: function(chart, d) {\n                return '0.25em';\n            },\n\n            text: function(d) {\n                return d.label ? (d.label.text || '') : '';\n            },\n\n            enter: function() {\n                this.chart().eventManager.bindAll(this);\n            },\n\n            exit: function() {\n                return this.remove();\n            }\n        });\n}));\n","/**\n * Triangle drawer.\n *\n * @class Triangle\n * @extends SimpleDataGroup\n * @requires d3.chart,\n *           charty,\n *           simpledatagroup\n *\n * @author \"Marcio Caraballo <marcio.caraballososa@gmail.com>\"\n */\n\n(function(root, factory) {\n    /** Setting up AMD support*/\n    if (typeof define === 'function' && define.amd) {\n        /** AMD */\n        define('charty/triangle', [\n                'd3.chart',\n                'charty/chartynames',\n                'underscore',\n                'charty/simpledatagroup'\n            ],\n            function(d3, Charty, _) {\n                /** Export global even in AMD case in case this script\n                 * is loaded with others */\n                return factory(d3, Charty, _);\n            });\n    } else {\n        /** Browser globals */\n        factory(d3, Charty, _);\n    }\n}(this, function(d3, Charty, _) {\n    d3.chart(Charty.CHART_NAMES.SIMPLE_DATA_GROUP)\n        .extend(Charty.CHART_NAMES.TRIANGLE, {\n            /**\n             * Triangle initialization\n             *\n             * @constructor\n             * @param {Object} args Arguments for triangle component.\n             */\n            initialize: function() {\n\n                /**\n                 * c : triangle color\n                 */\n                var defaults = {\n                    c: 'triangle-default'\n                };\n\n                var options = {\n                    /**\n                     * Data bind for a triangle serie.\n                     * Will set a color for the whole serie.\n                     *\n                     * @method dataBind\n                     * @param {Object} d example = {\n                     *                              color : 'red',\n                     *                              data : [\n                     *                                {x : 'Jun', y : 200 , c:'blue'},\n                     *                                ...\n                     *                              ]\n                     *                            }\n                     * @chainable\n                     */\n                    dataBind: function(d) {\n\n                        var chart = this.chart();\n\n                        chart.c = (d.c || defaults.c);\n\n                        return this.selectAll('path')\n                            .data(d.data);\n\n                    },\n                    /**\n                     * Appends a svg:path\n                     *\n                     * @method insert\n                     * @chainable\n                     */\n                    insert: function() {\n                        return this.append('path');\n                    },\n                    events: {\n                        'enter': function() {\n                            this.chart()\n                                .eventManager.bindAll(this);\n\n                            return this;\n                        },\n                        'merge': function() {\n                            /** Click event won't be managed here */\n                            var chart = this.chart();\n\n                            this.attr('class', function(d) {\n                                return (d.c || chart.c);\n                            })\n                                .attr('d', function(d) {\n                                    return chart.getPath(d);\n                                });\n\n                            return this;\n                        },\n                        'exit': function() {\n\n                            return this.remove();\n                        }\n                    }\n                };\n\n                /**\n                 * Layer creation\n                 */\n                this.layer('triangles', this.base.append('g'), options);\n            },\n            /**\n             * Transform must be redefined in order to\n             * separate a triangle in two constituting parts\n             *\n             * @method transform\n             * @param {Object} data Data Acccessor\n             * @return {Object} already mapped values for each datapoint\n             */\n            transform: function(data) {\n                var result = [],\n                    dataArray = data.next()\n                    .data,\n                    self = this,\n                    xBand = this.xscale.band(1),\n                    zeroY = this.yscale.map(0);\n\n                /** Obtains necessary point to draw both paths */\n                _.each(dataArray, function(element) {\n                    var x1 = self.xscale.map(element.x, 1),\n                        x2 = x1 + (xBand / 2),\n                        x3 = x1 + xBand,\n                        y1 = zeroY,\n                        y2 = self.yscale.map(element.y);\n\n                    result.unshift({\n                        x1: x1,\n                        y1: y1,\n                        x2: x2,\n                        y2: y2,\n                        x3: x2,\n                        y3: y1,\n                        c: element.c1,\n                        x: element.x,\n                        y: element.y\n                    });\n                    result.unshift({\n                        x1: x2,\n                        y1: y1,\n                        x2: x2,\n                        y2: y2,\n                        x3: x3,\n                        y3: y1,\n                        c: element.c2,\n                        x: element.x,\n                        y: element.y\n                    });\n                });\n\n                return {\n                    data: result,\n                    c: data.first()\n                        .c\n                };\n            },\n            /**\n             * Path is defined as a string connecting different\n             * data, visualized as dots.\n             *\n             * @method getPath\n             * @param {Object} d Data point\n             * @return {String} path\n             */\n            getPath: function(d) {\n                return ('M ' + d.x1 + ' ' + d.y1 + ' L ' + d.x2 + ' ' + d.y2 + ' L ' + d.x3 + ' ' + d.y3);\n            }\n        });\n}));\n","/**/\n/**\n * Defines a data transformation for composite charts\n *\n * @class MultipleDataGroup\n * @extend BaseChart\n * @requires d3.chart,\n *           charty,\n *           basechart\n *\n * @author \"Marcio Caraballo <marcio.caraballososa@gmail.com>\"\n */\n\n(function(root, factory) {\n    /** Setting up AMD support*/\n    if (typeof define === 'function' && define.amd) {\n        /** AMD */\n        define('charty/multipledatagroup', [\n                'd3.chart',\n                'charty/chartynames',\n                'charty/basechart'\n            ],\n            function(d3, Charty) {\n                /** Export global even in AMD case in case this script\n                 * is loaded with others */\n                return factory(d3, Charty);\n            });\n    } else {\n        /** Browser globals */\n        factory(d3, Charty);\n    }\n}(this, function(d3, Charty) {\n    d3.chart(Charty.CHART_NAMES.BASE_CHART)\n        .extend(Charty.CHART_NAMES.MULTIPLE_DATA_GROUP, {\n            /**\n             * Data transformation for multiple data series.\n             *\n             * @method tranform\n             * @param {Object} data Data accessor\n             * @return {Object} Data accesor\n             */\n            transform: function(data) {\n\n                this._calculateDomains(data);\n                return data;\n            },\n            /**\n             * Default domain for x scaling\n             *\n             * @method setDefaultXDomain\n             * @param {Object} domain Array for x domain\n             * @chainable\n             */\n            setDefaultXDomain: function(domain) {\n                this.defaultXDomain = domain;\n                return this;\n            },\n            /**\n             * Default domain for y scaling\n             *\n             * @method setDefaultYDomain\n             * @param {Object} domain Array for y domain\n             * @chainable\n             */\n            setDefaultYDomain: function(domain) {\n                this.defaultYDomain = domain;\n                return this;\n            },\n            /**\n             * Domain calculation\n             *\n             * @method _calculateDomains\n             * @param {Object} data Data for domains\n             * @param {Object} zScale d3.scale\n             */\n            _calculateDomains: function(data) {\n                /** Default x domain */\n                if (this.defaultXDomain) {\n                    this.xscale.setDomain(this.defaultXDomain);\n                } else {\n                    this.xscale.calculateDomain(data, function(d) {\n                        return d.x;\n                    });\n                }\n\n                if (this.zScale) {\n                    this.xscale.setRange(this.zScale.band(1));\n                } else {\n                    this.xscale.setRange(this.w);\n                }\n\n                /** Default y domain */\n                if (this.defaultYDomain) {\n                    this.yscale.setDomain(this.defaultYDomain);\n                } else {\n                    this.yscale.calculateDomain(data, function(d) {\n                        return d.y;\n                    });\n                }\n                this.yscale.setRange(this.h);\n            }\n        });\n}));\n","/**\n * Chart that can represent many data series\n *\n * @class MultipleInstancesMixin\n * @extends BaseChart\n * @requires d3.chart,\n *           charty,\n *           basechart\n *\n * @author \"Marcio Caraballo <marcio.caraballososa@gmail.com>\"\n */\n\n(function(root, factory) {\n    /** Setting up AMD support*/\n    if (typeof define === 'function' && define.amd) {\n        /** AMD */\n        define('charty/multipleinstancesmixin', [\n                'd3.chart',\n                'charty/chartynames',\n                'charty/basechart'\n            ],\n            function(d3, Charty) {\n                /** Export global even in AMD case in case this script\n                 * is loaded with others */\n                return factory(d3, Charty);\n            });\n    } else {\n        /** Browser globals */\n        factory(d3, Charty);\n    }\n}(this, function(d3, Charty) {\n\n    d3.chart(Charty.CHART_NAMES.BASE_CHART)\n        .extend(Charty.CHART_NAMES.MULTIPLE_INSTANCES_MIXIN, {\n\n            /**\n             * Creates multiple mixin instances of a specific chart.\n             * It is necessary to set the instances count\n             * and the chart name.\n             *\n             * @constructor\n             * @param {Object} args example = {\n             *                                    instances : 2,\n             *                                    chartName : 'Bar'\n             *                                  }\n             */\n            initialize: function(args) {\n\n                var f = args.instances;\n\n                this.componentsMixins = [];\n\n                for (var i = args.instances - 1; i >= 0; i--) {\n\n                    var instance = this.mixin(args.chartName,\n                        this.base.append('g'),\n                        args);\n\n                    instance.factor = ((f--) / args.instances);\n                }\n            }\n        });\n}));\n","/**\n * Base XY system for all the 2D charts.\n *\n * @class XYAxis\n * @requires d3.chart,\n *           charty,\n *           axis\n *\n * @author \"Marcio Caraballo <marcio.caraballososa@gmail.com>\"\n */\n\n(function(root, factory) {\n    /** Setting up AMD support*/\n    if (typeof define === 'function' && define.amd) {\n        /** AMD */\n        define('charty/xyaxis', [\n                'd3.chart',\n                'charty/chartynames',\n                'charty/axis'\n            ],\n            function(d3, Charty) {\n                /** Export global even in AMD case in case this script\n                 * is loaded with others */\n                return factory(d3, Charty);\n            });\n    } else {\n        /** Browser globals */\n        factory(d3, Charty);\n    }\n}(this, function(d3, Charty) {\n\n    d3.chart(Charty.CHART_NAMES.XY_AXIS, {\n        /**\n         * XY axis system initializer\n         *\n         * @constructor\n         * @param {Object} args Arguments for xy axis system.\n         */\n        initialize: function(args) {\n            this.xaxis = this.mixin(Charty.CHART_NAMES.AXIS,\n                this.base.append('g'),\n                args)\n                .orient('bottom')\n                .setTextLabel(args.xAxisLabel)\n                .tickCount(args.xTickCount)\n                .tickFormat(args.xAxisTickFormat)\n                .setClass(args.xAxisClass)\n                .setRotation(args.xAxisTickRotation);\n\n            this.yaxis = this.mixin(Charty.CHART_NAMES.AXIS,\n                this.base.append('g'),\n                args)\n                .orient('left')\n                .setTextLabel(args.yAxisLabel, '-90')\n                .tickCount(args.yTickCount)\n                .tickFormat(args.yAxisTickFormat)\n                .setClass(args.yAxisClass)\n                .setRotation(args.yAxisTickRotation);\n\n        },\n        /**\n         * Show whole chart as a grid.\n         *\n         * @method showAsGrid\n         * @chainable\n         */\n        showAsGrid: function(showAsGrid) {\n            this.xaxis.showAsGrid(showAsGrid);\n            this.yaxis.showAsGrid(showAsGrid);\n            return this;\n        },\n        /**\n         * Moves x axis according to given height value, and sets\n         * tick size value.\n         *\n         * @method height\n         * @param {Number} newHeight chart's height\n         * @chainable\n         */\n        height: function(newHeight) {\n            this.xaxis.ytranslate(newHeight)\n                .tickSize(newHeight);\n            this.yaxis.height(newHeight);\n            return this;\n        },\n        /**\n         * Sets tick size, based on given width value\n         *\n         * @method width\n         * @param {Number} newWidth chart's width\n         * @chainable\n         */\n        width: function(newWidth) {\n            this.yaxis.tickSize(newWidth)\n                .width(newWidth);\n            this.xaxis.width(newWidth);\n            return this;\n        },\n        /**\n         * Sets x scale.\n         *\n         * @method setXScale\n         * @param {Object} scale d3.scale\n         * @chainable\n         */\n        setXScale: function(scale) {\n            this.xaxis.setScale(scale);\n            return this;\n        },\n        /**\n         * Sets y scale.\n         *\n         * @method setYScale\n         * @param {Object} scale d3.scale\n         * @chainable\n         */\n        setYScale: function(scale) {\n            this.yaxis.setScale(scale);\n            return this;\n        }\n    });\n}));\n","/**\n * Defines a YXY axis system.\n * Two Y Axis (one left, one right)\n * One X Axis (bottom).\n *\n * It is built on top of the XY axis system that is already defined.\n *\n * @class YXYAxis\n * @requires d3.chart,\n *          charty,\n *          xyaxis\n *\n * @author \"Marcio Caraballo <marcio.caraballososa@gmail.com>\"\n */\n\n(function(root, factory) {\n    /** Setting up AMD support*/\n    if (typeof define === 'function' && define.amd) {\n        /** AMD */\n        define('charty/yxyaxis', [\n                'd3.chart',\n                'charty/chartynames',\n                'charty/xyaxis'\n            ],\n            function(d3, Charty) {\n                /** Export global even in AMD case in case this script\n                 * is loaded with others */\n                return factory(d3, Charty);\n            });\n    } else {\n        /** Browser globals */\n        return factory(d3, Charty);\n    }\n}(this, function(d3, Charty) {\n    d3.chart(Charty.CHART_NAMES.YXY_AXIS, {\n        /**\n         * Defines as a mixin a right Y axis, a left Y axis, a X bottom axis\n         *\n         * @constructor\n         * @param {Object} args Arguments for yxy axis system.\n         */\n        initialize: function(args) {\n            this.xyaxis = this.mixin(Charty.CHART_NAMES.XY_AXIS,\n                this.base.append('g'),\n                args);\n\n            this.yaxisright = this.mixin(Charty.CHART_NAMES.AXIS,\n                this.base.append('g'),\n                args)\n                .orient('right')\n                .tickCount(args.yTickCount)\n                .tickFormat(args.yAxisTickFormat);\n\n        },\n        /**\n         * Show whole chart as a grid.\n         *\n         * @method showAsGrid\n         * @chainable\n         */\n        showAsGrid: function(showAsGrid) {\n            this.xyaxis.showAsGrid(showAsGrid);\n            return this;\n        },\n        /**\n         * Sets x axis position and tick size\n         *\n         * @method height\n         * @param {Number} newHeight chart's height\n         * @chainable\n         */\n        height: function(newHeight) {\n            this.xyaxis.height(newHeight);\n            return this;\n        },\n        /**\n         * Sets y axis disposition, based on a given\n         * width value, and tick size for only one y axis.\n         *\n         * @method width\n         * @param {Number} newWidth chart's width\n         * @chainable\n         */\n        width: function(newWidth) {\n            this.yaxisright.xtranslate(newWidth);\n            this.xyaxis.width(newWidth);\n            return this;\n        },\n        /**\n         * Redefinition of x scale setter\n         *\n         * @method setXScale\n         * @param {Object} scale d3.scale\n         * @chainable\n         */\n        setXScale: function(scale) {\n            this.xyaxis.setXScale(scale);\n            return this;\n        },\n        /**\n         * Redefinition of y scale setter\n         *\n         * @method setYScale\n         * @param {Object} scale d3.scale\n         * @chainable\n         */\n        setYScale: function(scale) {\n            this.xyaxis.setYScale(scale);\n            this.yaxisright.setScale(scale);\n            return this;\n        }\n    });\n}));\n","/**\n * Create a bar chart that will render\n * N data series\n *\n * @class BarChart\n * @extends MultipleDataGroup\n * @requires d3.chart,\n *           charty,\n *           underscore,\n *           bar,\n *           multipledatagroup,\n *           yxyaxis,\n *           multipleinstancesmixin\n *\n * @author \"Marcio Caraballo <marcio.caraballososa@gmail.com>\"\n */\n(function(root, factory) {\n    /** Setting up AMD support*/\n    if (typeof define === 'function' && define.amd) {\n        /** AMD */\n        define('charty/barchart', [\n                'd3.chart',\n                'charty/chartynames',\n                'underscore',\n                'charty/bar',\n                'charty/horizontalbar',\n                'charty/multipledatagroup',\n                'charty/xyaxis',\n                'charty/yxyaxis',\n                'charty/multipleinstancesmixin',\n                'charty/text',\n                'charty/abovetext',\n                'charty/righttext'\n            ],\n            function(d3, Charty, _) {\n                /** Export global even in AMD case in case this script\n                 * is loaded with others */\n                return factory(d3, Charty, _);\n            });\n    } else {\n        /** Browser globals */\n        factory(d3, Charty, _);\n    }\n}(this, function(d3, Charty, _) {\n\n    d3.chart(Charty.CHART_NAMES.MULTIPLE_DATA_GROUP)\n        .extend(Charty.CHART_NAMES.BAR_CHART, {\n\n            /**\n             * BarChart initialization.\n             *\n             * @constructor\n             * @param {Object} args example = {\n             *                       instances : 2,\n             *                       labelType : Charty.CHART_NAMES.ABOVE_TEXT\n             *                    }\n             */\n            initialize: function(args) {\n\n                args.instances = (args.instances || 1);\n                args.chartName = args.barType;\n\n                this.mixin(args.axisSystem, this.base.append('g'), args)\n                    .showAsGrid(args.showAsGrid);\n\n                this.mixin(\n                    Charty.CHART_NAMES.MULTIPLE_INSTANCES_MIXIN,\n                    this.base.append('g'),\n                    args\n                );\n\n                /** Optional */\n                if (args.labelType) {\n                    this.mixin(\n                        Charty.CHART_NAMES.MULTIPLE_INSTANCES_MIXIN,\n                        this.base.append('g'),\n                        // @TODO review extend vs defaults\n                        _.extend(args, {\n                            chartName: args.labelType\n                        })\n                    );\n                }\n            }\n        });\n}));\n","/*global ScaleFactory: true*/\n/**\n * Grouped bar chart.\n * Unlike regular bar char, grouped needs to define\n * two scales for x axis : one for the axis itself, and\n * another one for the data mapping.\n *\n * @class GroupedBarChart\n * @extends MultipleDataGroup\n * @requires d3.chart,\n *           charty/chartynames,\n *           charty/scalesfactory,\n *           charty/bar,\n *           charty/xyaxis,\n *           charty/multipledatagroup,\n *           charty/multipleinstancesmixin\n */\n\n(function(root, factory) {\n    /** Setting up AMD support*/\n    if (typeof define === 'function' && define.amd) {\n        /** AMD */\n        define('charty/groupedbarchart', [\n                'd3.chart',\n                'charty/scalesfactory',\n                'charty/chartynames',\n                'charty/bar',\n                'charty/xyaxis',\n                'charty/multipledatagroup',\n                'charty/multipleinstancesmixin',\n            ],\n            function(d3, ScaleFactory, Charty) {\n                /** Export global even in AMD case in case this script\n                 * is loaded with others */\n                return factory(d3, ScaleFactory, Charty);\n            });\n    } else {\n        /** Browser globals */\n        return factory(d3, ScaleFactory, Charty);\n    }\n}(this, function(d3, ScaleFactory, Charty) {\n    d3.chart(Charty.CHART_NAMES.MULTIPLE_DATA_GROUP)\n        .extend(Charty.CHART_NAMES.GROUPED_BAR_CHART, {\n\n            /**\n             * Grouper Bar Chart initializer.\n             *\n             * @constructor\n             * @param {Object} args Arguments for grouped bar chart.\n             */\n            initialize: function(args) {\n\n                this.axisSystem = this.mixin(args.axisSystem, this.base.append('g'), args)\n                    .showAsGrid(args.showAsGrid);\n                this.bars = this.mixin(Charty.CHART_NAMES.BAR, this.base.append('g'), args);\n            },\n            /**\n             * It is necessary to rewrite transform data, in order to\n             * generate a new scale.\n             *\n             * Two scales are needed : one for the axis, and another\n             * one for bar drawing.\n             *\n             * @method\n             * @param {Object} data Data Accessor\n             */\n            transform: function(data) {\n\n                // @TODO review this call.\n                data.first();\n\n                if (this.defaultZDomain) {\n                    this.zScale.setDomain(this.defaultZDomain);\n                } else {\n                    this.zScale.calculateDomain(data, function(d) {\n                        return d.z;\n                    });\n                }\n                this.zScale.setRange(this.w);\n\n                this._calculateDomains(data);\n\n                /** x scale is replaced with z scale */\n                this.axisSystem.setXScale(this.zScale);\n\n                /** Adds z scale to bars */\n                this.bars.setZScale(this.zScale);\n\n                return data;\n            },\n            /**\n             * Adding new scale for bars grouping\n             *\n             * @method\n             * @param {Object} zScale d3.scale\n             * @chainable\n             */\n            setZScale: function(zScale) {\n                if (zScale) {\n                    this.zScale = zScale;\n                }\n\n                return this;\n            },\n            /**\n             * Default z domain\n             *\n             * @method\n             * @param {Object} zDomain\n             * @chainable\n             */\n            setDefaultZDomain: function(zDomain) {\n                this.defaultZDomain = zDomain;\n                return this;\n            }\n        });\n}));\n","/**\n * Custom donut chart.\n * Sets a text inside the donut, showing a text label\n * with the represented value.\n *\n * So, this representation will get only one value. The\n * other one must be calculated (rest).\n *\n * The problem can't be solved using mixins, since the text position\n * doesn't depend on the data value.\n *\n * @class DonutWithInnerText\n * @extends Donut\n * @requires d3.chart,\n *           charty,\n *           donut\n *\n * @author \"Marcio Caraballo <marcio.caraballososa@gmail.com>\"\n */\n\n(function(root, factory) {\n    /** Setting up AMD support*/\n    if (typeof define === 'function' && define.amd) {\n        /** AMD */\n        define('charty/donutwithinnertext', [\n                'd3.chart',\n                'charty/chartynames',\n                'charty/donut'\n            ],\n            function(d3, Charty) {\n                /** Export global even in AMD case in case this script\n                 * is loaded with others */\n                return factory(d3, Charty);\n            });\n    } else {\n        /** Browser globals */\n        factory(d3, Charty);\n    }\n}(this, function(d3, Charty) {\n\n    d3.chart(Charty.CHART_NAMES.DONUT)\n        .extend(Charty.CHART_NAMES.DONUT_INNER_TEXT, {\n\n            /** \n             * Constructor\n             *\n             * @constructor\n             * @param {Object} args Arguments for donnut with inner text.\n             */\n            initialize: function(args) {\n\n                var dataValidator = args.dataValidator,\n                    errors = {\n                        invalidFontSize: 'Invalid value : font size must be positive'\n                    };\n\n                /**\n                 * Defaults for Inner text\n                 */\n                var defaults = {\n                    fontSize: 55\n                };\n\n                var options = {\n                    /**\n                     * First element will be shown as label.\n                     *\n                     * Data here will take two elements, since is necessary\n                     * to render two paths for the donut chart.\n                     *\n                     * The first one is the one that will be shown in label.\n                     * The second one is the rest of the donut.\n                     *\n                     * @method dataBind\n                     * @param {Object} data\n                     * @chainable\n                     */\n                    dataBind: function(d) {\n\n                        var chart = this.chart(),\n                            data = d.data,\n                            stringValue = (data[0].y)\n                            .toString() + '%';\n\n                        chart.fontSize = (dataValidator.isPositiveNumber(d.fontSize, errors.invalidFontSize) || defaults.fontSize);\n                        /** By default, text will be centered inside donut */\n                        chart.xPosition = (d.xPosition || (chart.w / 2));\n                        chart.yPosition = (d.yPosition || (chart.h / 2));\n\n                        return this.selectAll('text')\n                            .data([stringValue]);\n                    },\n                    /**\n                     * Inserts one text for the value to display\n                     *\n                     * @method insert\n                     * @chainable\n                     */\n                    insert: function() {\n                        return this.append('text');\n                    },\n                    events: {\n                        'enter': function() {\n\n                            var chart = this.chart();\n\n                            this.attr('x', chart.xPosition)\n                                .attr('y', chart.yPosition)\n                                .attr('dy', '0.35em')\n                                .attr('text-anchor', 'middle')\n                                .attr('font-size', chart.fontSize)\n                                .text(function(d) {\n                                    return d;\n                                });\n\n                            return this;\n                        },\n                        'update': function() {\n\n                            this.text(function(d) {\n                                return d;\n                            });\n\n                            return this;\n                        },\n                        'exit': function() {\n\n                            return this.remove();\n                        }\n                    }\n                };\n\n                /**\n                 * Layer creation\n                 */\n                this.layer('donutText', this.base.append('g'), options);\n            }\n        });\n}));\n","/**\n * Labeled triangle chart drawer.\n *\n * @class LabeledTriangleChart\n * @extends MultipleDataGroup\n * @requires d3.chart,\n *           charty,\n *           triangle,\n *           roundedrectangle,\n *           textlabel,\n *           multipleinstancesmixin,\n *           yxyaxis,\n *           multipledatagroup\n *\n * @author \"Marcio Caraballo <marcio.caraballososa@gmail.com>\"\n */\n(function(root, factory) {\n    /** Setting up AMD support*/\n    if (typeof define === 'function' && define.amd) {\n        /** AMD */\n        define('charty/labeledtrianglechart', [\n                'd3.chart',\n                'charty/chartynames',\n                'charty/triangle',\n                'charty/roundedrectangle',\n                'charty/text',\n                'charty/multipleinstancesmixin',\n                'charty/yxyaxis',\n                'charty/multipledatagroup'\n            ],\n            function(d3, Charty) {\n                /** Export global even in AMD case in case this script\n                 * is loaded with others */\n                return factory(d3, Charty);\n            });\n    } else {\n        /** Browser globals */\n        factory(d3, Charty);\n    }\n}(this, function(d3, Charty) {\n    d3.chart(Charty.CHART_NAMES.MULTIPLE_DATA_GROUP)\n        .extend(Charty.CHART_NAMES.LABELED_TRIANGLE_CHART, {\n            /**\n             * Labeled triangle constructor.\n             *\n             * Will contain only one instance of each component chart, since no\n             * resize can be assumed.\n             *\n             * @constructor\n             * @param {Object} args Arguments for triangle chart.\n             */\n            initialize: function(args) {\n                this.mixin(args.axisSystem, this.base.append('g'), args)\n                    .showAsGrid(args.showAsGrid);\n\n                this.mixin(Charty.CHART_NAMES.TRIANGLE, this.base.append('g'), args);\n\n                this.mixin(Charty.CHART_NAMES.ROUNDED_RECTANGLE, this.base.append('g'), args);\n\n                this.mixin(Charty.CHART_NAMES.TEXT, this.base.append('g'), args);\n            }\n        });\n}));\n","/**\nLine chart drawers.\nTakes N input data series\n\n@class LineChart\n@extends MultipleDataGroup\n@requires d3.chart,\n          charty,\n          line,\n          multipledatagroup\n\n@author \"Marcio Caraballo <marcio.caraballososa@gmail.com>\"\n*/\n\n(function(root, factory) {\n    /** Setting up AMD support*/\n    if (typeof define === 'function' && define.amd) {\n        /** AMD */\n        define('charty/linechart', [\n                'd3.chart',\n                'charty/chartynames',\n                'charty/line',\n                'charty/multipledatagroup'\n            ],\n            function(d3, Charty) {\n                /** Export global even in AMD case in case this script\n                 * is loaded with others */\n                return factory(d3, Charty);\n            });\n    } else {\n        /** Browser globals */\n        factory(d3, Charty);\n    }\n}(this, function(d3, Charty) {\n    d3.chart(Charty.CHART_NAMES.MULTIPLE_DATA_GROUP)\n        .extend(Charty.CHART_NAMES.LINE_CHART, {\n            /**\n             * Multiple data group initializator.\n             *\n             * Creates N instances of a given mixin.\n             *\n             * @constructor\n             * @param {Object} args N = args.instances\n             */\n            initialize: function(args) {\n                args.chartName = Charty.CHART_NAMES.LINE;\n                args.instances = (args.instances || 1);\n\n                this.mixin(args.axisSystem, this.base.append('g'), args)\n                    .showAsGrid(args.showAsGrid);\n\n                this.mixin(\n                    Charty.CHART_NAMES.MULTIPLE_INSTANCES_MIXIN,\n                    this.base.append('g'),\n                    args\n                );\n            }\n        });\n}));\n","/**\n * Line chart combined with circles. Combines the line chart and\n * the circle component, defining both as mixins.\n *\n * @class LineChartCircles\n * @extends MultipleDataGroup\n * @requires\td3.chart,\n *           charty,\n *           multipledatagroup,\n *           linechart,\n *           multipleinstancesmixin\n *\n * @author \"Marcio Caraballo <marcio.caraballososa@gmail.com>\"\n */\n\n(function(root, factory) {\n    /** Setting up AMD support*/\n    if (typeof define === 'function' && define.amd) {\n        /** AMD */\n        define('charty/linechartcircles', [\n                'd3.chart',\n                'charty/chartynames',\n                'charty/multipledatagroup',\n                'charty/linechart',\n                'charty/multipleinstancesmixin'\n            ],\n            function(d3, Charty) {\n                /** Export global even in AMD case in case this script\n                 * is loaded with others */\n                return factory(d3, Charty);\n            });\n    } else {\n        /** Browser globals */\n        factory(d3, Charty);\n    }\n}(this, function(d3, Charty) {\n    d3.chart(Charty.CHART_NAMES.MULTIPLE_DATA_GROUP)\n        .extend(Charty.CHART_NAMES.LINE_CHART_CIRCLES, {\n\n            /**\n             * Line and circles chart initializator.\n             *\n             * @constructor\n             * @param {Object} args example = {\n             *                          instances : 2\n             *                      }\n             */\n            initialize: function(args) {\n                this.mixin(\n                    Charty.CHART_NAMES.LINE_CHART,\n                    this.base.append('g'),\n                    args\n                );\n\n                args.chartName = Charty.CHART_NAMES.CIRCLE;\n                args.instances = (args.instances || 1);\n\n                this.mixin(\n                    Charty.CHART_NAMES.MULTIPLE_INSTANCES_MIXIN,\n                    this.base.append('g'),\n                    args\n                );\n            }\n        });\n}));\n","/**\n * Scatterplot chart. Defined combining an axis system and a circles mixin.\n *\n * @class Scatterplot\n * @extends MultipleDataGroup\n * @requires d3.chart,\n *           charty,\n *           circle,\n *           multipledatagroup,\n *           yxyaxis,\n *           multipleinstancesmixin\n *\n * @author \"Marcio Caraballo <marcio.caraballososa@gmail.com>\"\n */\n\n(function(root, factory) {\n    /** Setting up AMD support*/\n    if (typeof define === 'function' && define.amd) {\n        /** AMD */\n        define('charty/scatterplot', [\n                'd3.chart',\n                'charty/chartynames',\n                'charty/circle',\n                'charty/multipledatagroup',\n                'charty/yxyaxis',\n                'charty/multipleinstancesmixin',\n                'charty/labeledtext'\n            ],\n            function(d3, Charty) {\n                /** Export global even in AMD case in case this script\n                 * is loaded with others */\n                return factory(d3, Charty);\n            });\n    } else {\n        /** Browser globals */\n        factory(d3, Charty);\n    }\n}(this, function(d3, Charty) {\n    d3.chart(Charty.CHART_NAMES.MULTIPLE_DATA_GROUP)\n        .extend(Charty.CHART_NAMES.SCATTERPLOT, {\n\n            /**\n             * Chart constructor\n             *\n             * @constructor\n             * @param {Object} args Arguments for scatterplot chart.\n             */\n            initialize: function(args) {\n                args.chartName = Charty.CHART_NAMES.CIRCLE;\n                args.instances = (args.instances || 1);\n\n                this.mixin(args.axisSystem, this.base.append('g'), args)\n                    .showAsGrid(args.showAsGrid);\n\n                this.mixin(Charty.CHART_NAMES.MULTIPLE_INSTANCES_MIXIN, this.base, args);\n\n                // Applying the multiple data sets also to the \"LABELED_TEXT\" chart.\n                // TODO: Need a refactor of \"MULTIPLE_INSTANCES_MIXIN\" to allow adding the\n                //  data sets to more than one chart.\n                args.chartName = Charty.CHART_NAMES.LABELED_TEXT;\n                this.mixin(Charty.CHART_NAMES.MULTIPLE_INSTANCES_MIXIN, this.base, args);\n            }\n        });\n}));\n","/**\n * Accessor for data collection\n *\n * Accessor will iterate over the data collection.\n *\n * @class Accessor\n *\n * @author \"Marcio Caraballo <marcio.caraballososa@gmail.com>\"\n */\n\n(function(root, factory) {\n    /** Setting up AMD support*/\n    if (typeof define === 'function' && define.amd) {\n        /** AMD */\n        define('charty/accessor', function() {\n            /** Export global even in AMD case in case this script\n             * is loaded with others */\n            return factory();\n        });\n    } else {\n        /** Browser globals */\n        root.Accessor = factory();\n    }\n}(this, function() {\n\n    /** \n     * Class constructor\n     *\n     * @constructor\n     */\n    function Accessor() {\n        this.index = -1;\n    }\n\n    /**\n     * Returns first element of the collection\n     *\n     * @method first\n     * @return {Object} data element from the collection\n     */\n    Accessor.prototype.first = function() {\n        return this.data[0];\n    };\n\n    /**\n     * Returns the next element of the collection\n     * If no more elements are available,\n     * collection index will reset itself\n     *\n     * @method next\n     * @return {Object} next element in the collection,\n     * first element in case of reset\n     */\n    Accessor.prototype.next = function() {\n        if (!this.hasNext()) {\n            this.restart();\n        }\n        return this.data[++this.index];\n    };\n\n    /**\n     * Determines if the collection has more elements\n     *\n     * @method hasNext\n     * @return {Boolean} true if collection has more elements,\n     * false if not\n     */\n    Accessor.prototype.hasNext = function() {\n        return this.index + 1 < this.data.length;\n    };\n\n    /**\n     * Resets the colletion to restart iteration automatically\n     *\n     * @method restart\n     * @chainable\n     */\n    Accessor.prototype.restart = function() {\n        this.index = -1;\n        return this;\n    };\n\n    /**\n     * Returns the data contained in the accessor\n     *\n     * @method getData\n     * @return {Object} data collection\n     */\n    Accessor.prototype.getData = function() {\n        return this.data;\n    };\n\n    /**\n     * Sets a specific data set to this accessor\n     *\n     * @method setDate\n     * @param {Object} data Data series\n     * @chainable\n     */\n    Accessor.prototype.setData = function(data) {\n        this.data = data;\n        return this;\n    };\n\n    /**\n     * Gets the length of the data set.\n     *\n     * @method getLength\n     * @return {Number} the length of the data\n     */\n    Accessor.prototype.getLength = function() {\n        return this.data.length;\n    };\n\n    return Accessor;\n}));\n","/**\n *\tWhen an event occurs, a defined function will be exectuted.\n *\tThis is for events that don't depende on an specific API.\n *\n *\t@class FunctionEvent\n *\t@constructor\n *\t@requires d3\n *\n *\t@author \"Marcio Caraballo <marcio.caraballososa@gmail.com>\"\n */\n(function(root, factory) {\n    /** Setting up AMD support*/\n    if (typeof define === 'function' && define.amd) {\n        /** AMD */\n        define('charty/functionevent', [], function() {\n            /**\n             * Export global even in AMD case in case this script\n             * is loaded with others\n             */\n            return factory();\n        });\n    } else {\n        /** Browser globals */\n        root.FunctionEvent = factory();\n    }\n}(this, function() {\n\n    /**\n     * Class constructor\n     *\n     * In the execute function, d represents a specific data element\n     *\n     * @constructor\n     * @param {Object} options = {\n     *                       on : 'click',\n     *                       execute : function (d) {}\n     *                       }\n     */\n    function FunctionEvent(options) {\n\n        this.opts = options;\n    }\n\n    /**\n     * Binds a function to a specific event\n     *\n     * @method bind\n     * @param {d3.selection} target Target to bind event\n     * @chainable\n     */\n    FunctionEvent.prototype.bind = function(target) {\n\n        target.on(this.opts.on, this.opts.execute);\n        return this;\n    };\n\n    return FunctionEvent;\n\n}));\n","/*global $: true*/\n/**\n *\tHooks to specified element a bootstrap feature (for instance, a popover).\n *\tSince data will be handled a specific way, a custom bootstrap event is given in\n *\torder to facilitate instantiation.\n *\n *\tNote : since SVG element won't render contained divs, every element will\n *\tbe added to the 'body' element. This workaround is easier than dealing with\n *\tSVG foreing objects.\n *\n *\tSupported bootstrap features : popovers, tooltips.\n *\n *\t@class BootstrapEvent\n *\t@constructor\n *\t@requires bootstrap,\n *\t\t\t\t\t\tunderscore,\n *\t\t\t\t\t\td3\n *\n *\t@author \"Marcio Caraballo <marcio.caraballososa@gmail.com>\"\n */\n(function(root, factory) {\n    /** Setting up AMD support */\n    if (typeof define === 'function' && define.amd) {\n        /** AMD */\n        define('charty/bootstrapevent', [\n            'bootstrap',\n            'underscore',\n            'd3'\n        ], function($, _, d3) {\n            /**\n             * Export global even in AMD case in case this script\n             * is loaded with others\n             */\n            return factory($, _, d3);\n        });\n    } else {\n        /** Browser globals */\n        root.BootstrapEvent = factory($, _, d3);\n    }\n}(this, function($, _) {\n\n    /**\n     *\tClass constructor\n     *\n     *\t@constructor\n     *\t@param Object options example = {\n     *\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype : 'popover',\n     *\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplacement: 'left',\n     *\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttrigger: 'click',\n     *\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontent : function () {}\n     *\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n     */\n    function BootstrapEvent(options) {\n        this.opts = options;\n    }\n\n    /**\n     * Binds the bootstrap feature to a specified target selection\n     *\n     * @method bind\n     * @param  {d3.selection} target Target selection\n     * @chainable\n     */\n    BootstrapEvent.prototype.bind = function(target) {\n\n        var self = this;\n\n        /**\n         * Traversing d3 structure to allow jquery bootstrap bindings\n         */\n        _.each(target[0], function(element) {\n\n            var d3Element = d3.select(element);\n\n            d3Element.attr('data-toggle', self.opts.type);\n\n            /** Bootstrap popover / tooltip instantiation */\n            $(element)[self.opts.type]({\n                placement: self.opts.placement,\n                trigger: self.opts.trigger,\n                html: true,\n                container: 'body',\n                context: d3Element,\n                content: function() {\n                    return self.opts.content(element);\n                }\n            });\n        });\n\n        return this;\n    };\n\n    return BootstrapEvent;\n}));\n","/*global FunctionEvent: true, BootstrapEvent: true*/\n/**\n *\tEvent factory. Creates instances of predefined events objects.\n *\n *\t@class EventManager\n *\t@constructor\n *\t@requires functionevent,\n *\t\t\t\t\t\tbootstrapevent\n *\n *\t@author \"Marcio Caraballo <marcio.caraballososa@gmail.com>\"\n */\n(function(root, factory) {\n    /** Setting up AMD support*/\n    if (typeof define === 'function' && define.amd) {\n        /** AMD */\n        define('charty/eventfactory', [\n            'charty/functionevent',\n            'charty/bootstrapevent',\n        ], function(FunctionEvent, BootstrapEvent) {\n            /**\n             * Export global even in AMD case in case this script\n             * is loaded with others\n             */\n            return factory(FunctionEvent, BootstrapEvent);\n        });\n    } else {\n        /** Browser globals */\n        root.EventFactory = factory(FunctionEvent, BootstrapEvent);\n    }\n}(this, function(FunctionEvent, BootstrapEvent) {\n\n    /**\n     *\tClass constructor\n     *\n     * @constructor\n     */\n    function EventFactory() {\n\n    }\n\n    /**\n     *\tCreates a specific Charty event object.\n     *\n     *\t@method\n     *\t@param {Object} e Defined event options\n     *\t@returns {Event} Charty event\n     */\n    EventFactory.prototype.createEvent = function(e) {\n\n        var EventObject = null;\n\n        switch (e.type) {\n            case 'function':\n                EventObject = new FunctionEvent({\n                    on: e.evt,\n                    execute: e.bind\n                });\n                break;\n            case 'bootstrap':\n                EventObject = new BootstrapEvent({\n                    trigger: e.evt,\n                    type: e.element,\n                    content: e.bind,\n                    placement: e.placement\n                });\n                break;\n            default:\n                break;\n        }\n\n        return EventObject;\n    };\n\n    return EventFactory;\n}));\n","/*global FunctionEvent: true, BootstrapEvent: true*/\n/**\n * Event manager. A simple way of adding multiple events to only one target,\n * if necessary.\n *\n * Since d3 works over selections, a \"target\" will represent an element selection,\n * so manager won't be working over only one element, but for the collection itself.\n *\n * @class EventManager\n * @constructor\n * @requires functionevent,\n *\t\t\t\t\t\tbootstrapevent,\n *\t\t\t\t\t\tunderscore\n *\n * @author \"Marcio Caraballo <marcio.caraballososa@gmail.com>\"\n */\n(function(root, factory) {\n    /** Setting up AMD support*/\n    if (typeof define === 'function' && define.amd) {\n        /** AMD */\n        define('charty/eventmanager', [\n            'charty/functionevent',\n            'charty/bootstrapevent',\n            'underscore'\n        ], function(FunctionEvent, BootstrapEvent, _) {\n            /**\n             * Export global even in AMD case in case this script\n             * is loaded with others\n             */\n            return factory(FunctionEvent, BootstrapEvent, _);\n        });\n    } else {\n        /** Browser globals */\n        root.EventManager = factory(FunctionEvent, BootstrapEvent, _);\n    }\n}(this, function(FunctionEvent, BootstrapEvent, _) {\n\n    /**\n     * Class constructor\n     *\n     * @constructor\n     */\n    function EventManager() {\n\n        this.events = [];\n    }\n\n    /**\n     * Adds specific defined event to queue\n     *\n     * @method addEvent\n     * @param {Event} e Charty event to bind\n     * @chainable\n     */\n    EventManager.prototype.addEvent = function(e) {\n\n        this.events.push(e);\n\n        return this;\n    };\n\n    /**\n     * Binds all available events to specified targets.\n     *\n     * Each event wrapper must have a way to bind itself to the specified\n     * elements.\n     *\n     * @method bindAll\n     * @param {d3.selection} t Elements selection\n     * @chainable\n     */\n    EventManager.prototype.bindAll = function(t) {\n        _.each(this.events, function(e) {\n            e.bind(t);\n        });\n\n        return this;\n    };\n\n    return EventManager;\n\n}));\n","\n/*jshint -W074*/\n/*global Accessor: true, EventManager: true, EventFactory: true*/\n/**\n * Sets an interface for adding a link between the chart\n * and the data accessor.\n *\n * Uses an event manager for defining different charty events. Since events\n * need to be present when chart is rendered, for attachment to every SVG node,\n * they should be defined by draw method. This makes an easy way of propagating\n * events to each base rendering class.\n *\n * Note : events are NOT defined in chart init, it can happen that, at this point,\n * events handler are not yet defined or they don't have all necessary data.\n *\n * @class ChartInterface\n * @requires accessor,\n *           eventmanager\n *           eventfactory\n *           underscore\n *\n * @author \"Marcio Caraballo <marcio.caraballososa@gmail.com>\"\n */\n(function(root, factory) {\n    /** Setting up AMD support*/\n    if (typeof define === 'function' && define.amd) {\n        /** AMD */\n        define('charty/chartinterface', [\n                'charty/accessor',\n                'charty/eventmanager',\n                'charty/eventfactory',\n                'underscore'\n            ],\n            function(Accessor, EventManager, EventFactory, _) {\n                /** Export global even in AMD case in case this script\n                 * is loaded with others */\n                return factory(Accessor, EventManager, EventFactory, _);\n            });\n    } else {\n        /** Browser globals */\n        root.ChartInterface = factory(Accessor, EventManager, EventFactory, _);\n    }\n}(this, function(Accessor, EventManager, EventFactory, _) {\n\n    /**\n     * Class constructor\n     *\n     * @constructor\n     * @param {Object} chart d3.chart object\n     * @param {Object} root chart's container\n     * @param {Object} svg svg element that contains the chart\n     * @param {Object} gSvg g element attached to svg\n     * @param {EventFactory} eventFactory Returns instances of Charty events\n     */\n    var ChartInterface = function(chart, rootSelection, svg, gSvg, eventFactory) {\n\n        this.accessor = new Accessor();\n\n        this.chart = chart;\n        this.rootSelection = rootSelection;\n        this.svg = svg;\n        this.gSvg = gSvg;\n        this.eventFactory = eventFactory;\n    };\n\n    /**\n     * Chart dimensioning via interface. Elements internal dimensioning.\n     *\n     * @method setDimensions\n     * @param {Number} width Drawing space width\n     * @param {Number} height Drawing space height\n     * @param {Object} margin margin = {\n     *                        marginleft = 20,\n     *                        margintop = 30,\n     *                        marginright = 20,\n     *                        marginbottom = 30,\n     *                        lfactor = 0.9,\n     *                        tfactor = 0.9\n     *                      }\n     */\n    ChartInterface.prototype.setDimensions = function(margin, width, height) {\n        /** Defaults margin values */\n        var marginValues = {\n            left: 0,\n            top: 0,\n            right: 0,\n            bottom: 0,\n            lfactor: 1,\n            tfactor: 1\n        };\n\n        /** Values are taken from root element, by parameter or by default */\n        var svgHeight = (height || parseInt(this.rootSelection.style('height'), 10) || 200),\n            svgWidth = (width || parseInt(this.rootSelection.style('width'), 10) || 200);\n\n        /** svg element dimensioning */\n        this.svg.attr('width', svgWidth)\n            .attr('height', svgHeight)\n            .attr('viewBox', ('0 0 ' + svgWidth + \" \" + svgHeight))\n            .attr('preserveAspectRatio', 'xMinYMin');\n\n        if (margin) {\n            marginValues = {\n                left: (margin.marginleft || 0),\n                top: (margin.margintop || 0),\n                right: (margin.marginright || 0),\n                bottom: (margin.marginbottom || 0),\n                lfactor: (margin.marginlfactor || 1),\n                tfactor: (margin.margintfactor || 1)\n            };\n\n            /** Translating g element */\n            this.gSvg.attr('transform', 'translate(' + marginValues.left + ',' + marginValues.top + ')');\n        }\n\n        /** Calculating values according to margin values */\n        svgWidth = (svgWidth - marginValues.right) * marginValues.lfactor;\n        svgHeight = (svgHeight - marginValues.bottom) * marginValues.tfactor;\n\n        /** Propagate value to chart*/\n        this.chart.height(svgHeight)\n            .width(svgWidth);\n    };\n\n    /**\n     * Interface to the chart drawing stage\n     *\n     * @method draw\n     * @param {Object} dataArray Data series contained in one array\n     * @param {Object} eventsArray Events to be attached to data elements\n     * @chainable\n     */\n    ChartInterface.prototype.draw = function(dataArray, eventsArray) {\n\n        var eventManager = new EventManager(),\n            self = this;\n\n        /** Adding events to manager */\n        _.each(eventsArray, function(e) {\n            eventManager.addEvent(self.eventFactory.createEvent(e));\n        });\n\n        /** Sets reference in chart for Event Manager */\n        this.chart.setEventManager(eventManager);\n\n        this.accessor.setData(dataArray);\n        this.chart.draw(this.accessor);\n\n        return this;\n    };\n\n    /**\n     * Chart redimension, without redrawing elements\n     *\n     * @method redimension\n     * @param {Number} height Value can be forced\n     * @param {Number} width Value can be forced\n     * @chainable\n     */\n    ChartInterface.prototype.redimension = function(height, width) {\n\n        var rootHeight = (height || parseInt(this.rootSelection.style('height'), 10)),\n            rootWidth = (width || parseInt(this.rootSelection.style('width'), 10)),\n            svgHeight = (parseInt(this.svg.style('height'), 10)),\n            svgWidth = (parseInt(this.svg.style('width'), 10));\n\n        /** Sets new dimensions and resizing happens */\n        if ((rootHeight !== svgHeight) || (rootWidth !== svgWidth)) {\n\n            this.svg.attr('height', rootHeight);\n            this.svg.attr('width', rootWidth);\n        }\n\n        return this;\n    };\n\n    /**\n     * Sets a background image via css. Class is required\n     *\n     * @method setBackgroundImage\n     * @param {String} imgClass CSS for the background image\n     * @chainable\n     */\n    ChartInterface.prototype.setBackgroundImage = function(imgClass) {\n\n        this.rootSelection.classed(imgClass, true);\n        /** Reference is kept for removing, if necessary */\n        this.imgClass = imgClass;\n\n        return this;\n    };\n\n    /**\n     * Removes class containing background image, if present\n     *\n     * @method removeBackgroundImage\n     * @chainable\n     */\n    ChartInterface.prototype.removeBackgroundImage = function() {\n        this.rootSelection.classed(this.imgClass, false);\n\n        return this;\n    };\n\n    /**\n     * Sets title as a header\n     *\n     * @method setTitle\n     * @param {String} title Chart title\n     * @param {Number} xPosition Position along horizontal axis\n     * @param {Number} yPosition Position along vertical axis\n     * @chainable\n     */\n    ChartInterface.prototype.setTitle = function(title, xPosition, yPosition) {\n\n        this.svg.append('text')\n            .attr('x', xPosition || 0)\n            .attr('y', yPosition || 30)\n            .text(title);\n\n        return this;\n    };\n\n    return ChartInterface;\n}));\n","/*global Charty: true, ScaleFactory: true, ChartInterface: true, DataValidator: true, EventFactory: true*/\n/**\n * Chart instantiation API\n *\n * @class Charty\n * @requires chartynames\n *           scalesfactory\n *           chartinterface\n *           datavalidator\n *           eventfactory\n *           barchart\n *           labeledtrianglechart\n *           linechart\n *           scatterplot\n *           donut\n *           donnutwithinnertext\n *           linechartcircles\n *           groupedbarchart\n *\n * @author \"Marcio Caraballo <marcio.caraballososa@gmail.com>\"\n */\n(function(root, factory) {\n\n    /** Setting up AMD support*/\n    if (typeof define === 'function' && define.amd) {\n        /** AMD */\n        define('charty/charty', [\n                'charty/chartynames',\n                'charty/scalesfactory',\n                'charty/chartinterface',\n                'charty/datavalidator',\n                'charty/eventfactory',\n                'charty/barchart',\n                'charty/labeledtrianglechart',\n                'charty/linechart',\n                'charty/scatterplot',\n                'charty/donut',\n                'charty/donutwithinnertext',\n                'charty/linechartcircles',\n                'charty/groupedbarchart',\n                'charty/winlossbar',\n                'charty/winlosstext',\n                'charty/labeledtext'\n            ],\n            function(Charty, ScaleFactory, ChartInterface, DataValidator, EventFactory) {\n                /** Export global even in AMD case in case this script\n                 * is loaded with others */\n                return factory(Charty, ScaleFactory, ChartInterface, DataValidator, EventFactory);\n            });\n    } else {\n        /** Browser globals */\n        root.Charty = factory(Charty, ScaleFactory, ChartInterface, DataValidator, EventFactory);\n    }\n\n}(this, function(Charty, ScaleFactory, ChartInterface, DataValidator, EventFactory) {\n\n    var scaleFactory = new ScaleFactory(),\n        dataValidator = new DataValidator(),\n        eventFactory = new EventFactory();\n\n    /**\n     * Appends a chart to a root d3.selection element. Chart is determined\n     * by a defined chart name.\n     * Margin is used to translate the chart a small distance. A chart can have many\n     * instances.\n     * Whether the chart takes the container dimensions, is it possible to also set\n     * the dimensions as initial options\n     * Defined events will be spread to every chart's component.\n     *\n     * @method chart\n     * @param {Object} options options = {\n     *                    chartName : 'BarChart',\n     *                    instances : 2,\n     *                    root : 'body',\n     *                    xAxis : 'ordinal',\n     *                    yAxis : 'linear',\n     *                    xScaleDomain : ['Hi', 'I am', 'a fixed', 'domain']\n     *                  }\n     * @return {Object} d3.chart for data drawing\n     */\n    Charty.chart = function(options) {\n\n        if (!options.root || !options.chartName) {\n            throw new Error('Root element or chart name not defined');\n        }\n\n        var selection = d3.select(options.root);\n\n        /**\n         * Svg element creation\n         */\n        var svg = selection.append('svg');\n\n        if (options.gradients) {\n            /** Creation of linear gradients, if defined */\n            var defs = svg.append('defs');\n            /** Possible to define many gradients for one svg element */\n            _.each(options.gradients, function(gradient) {\n                var grad = defs.append('linearGradient');\n                grad.attr('id', gradient.id);\n\n                if (gradient.orientation === 'vertical') {\n                    /** Vertial orientation */\n                    grad.attr('x1', 0)\n                        .attr('x2', 0)\n                        .attr('y1', 0)\n                        .attr('y2', 1);\n                }\n\n                _.each(gradient.classes, function(gradientClass) {\n                    grad.append('stop')\n                        .attr('class', gradientClass.className)\n                        .attr('offset', gradientClass.offset);\n                });\n            });\n        }\n\n        /** Append g to svg */\n        var gSvg = svg.append('g');\n\n        options.dataValidator = dataValidator;\n\n        /**\n         * Appends the chart to the specified html element.\n         */\n        var chart = gSvg.chart(options.chartName, options);\n\n        /**\n         * Scale definition.\n         * Some charts can use direct mapping instead of scaling.\n         */\n        if (options.xAxis) {\n            chart.setXScale(scaleFactory.scale(options.xAxis, 'x'));\n        }\n\n        if (options.yAxis) {\n            chart.setYScale(scaleFactory.scale(options.yAxis, 'y'));\n        }\n\n        /** Grouped bar chart uses another scale */\n        if (options.zAxis) {\n            chart.setZScale(scaleFactory.scale(options.zAxis, 'x'));\n        }\n\n        /** Sets default x domain */\n        if (options.defaultXDomain) {\n            chart.setDefaultXDomain(options.defaultXDomain);\n        }\n\n        /** Sets default y domain */\n        if (options.defaultYDomain) {\n            chart.setDefaultYDomain(options.defaultYDomain);\n        }\n\n        /** Sets default z domain */\n        if (options.defaultZDomain) {\n            chart.setDefaultZDomain(options.defaultZDomain);\n        }\n\n        /**\n         * Returns the interface for the chart drawing\n         *\n         * Interface will manage the events creation.\n         */\n        return new ChartInterface(chart, selection, svg, gSvg, eventFactory);\n    };\n\n    return Charty;\n}));\n"]}